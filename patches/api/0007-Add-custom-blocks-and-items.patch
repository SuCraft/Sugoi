From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Mon, 27 Jun 2022 01:43:47 +0200
Subject: [PATCH] Add custom blocks and items


diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 994e81359154fc52392fe64cbe5f17a7a67e66c0..6cb3bdcf6ca967b010d2793747d7169ad737bf50 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -12,6 +12,7 @@ import java.util.Map;
 import java.util.Set;
 import java.util.UUID;
 import java.util.function.Consumer;
+import java.util.function.Predicate;
 import java.util.logging.Logger;
 import org.bukkit.Warning.WarningState;
 import org.bukkit.advancement.Advancement;
@@ -972,6 +973,14 @@ public final class Bukkit {
         return server.addRecipe(recipe);
     }
 
+    // Suki start - custom blocks and items
+
+    public static boolean addRecipe(@Nullable Recipe recipe, boolean isSkippableForPlayersThatCannotAcceptLargePackets) {
+        return server.addRecipe(recipe, isSkippableForPlayersThatCannotAcceptLargePackets);
+    }
+
+    // Suki end - custom blocks and items
+
     /**
      * Get a list of all recipes for a given item. The stack size is ignored
      * in comparisons. If the durability is -1, it will match any data value.
@@ -2446,6 +2455,23 @@ public final class Bukkit {
     public static @NotNull org.bukkit.potion.PotionBrewer getPotionBrewer() {
         return server.getPotionBrewer();
     }
+
+    // Suki start - custom blocks and items
+
+    public static void addCanAcceptLargePacketsDisjunct(@NotNull Predicate<@NotNull Player> disjunct) {
+        server.addCanAcceptLargePacketsDisjunct(disjunct);
+    }
+
+    public static void addCanAcceptServerResourcePackDisjunct(@NotNull Predicate<@NotNull Player> disjunct) {
+        server.addCanAcceptServerResourcePackDisjunct(disjunct);
+    }
+
+    public static void addCanAcceptNonMinecraftRecipesDisjunct(@NotNull Predicate<@NotNull Player> disjunct) {
+        server.addCanAcceptNonMinecraftRecipesDisjunct(disjunct);
+    }
+
+    // Suki end - custom blocks and items
+
     // Paper end
 
     @NotNull
diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
index 1d6baee05643607baa40a07022576906ea61a92f..1c1339b6af1e3689a63dd08e5d3d91037f8d4402 100644
--- a/src/main/java/org/bukkit/Material.java
+++ b/src/main/java/org/bukkit/Material.java
@@ -3126,6 +3126,513 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
     BIG_DRIPLEAF_STEM(13167, Dripleaf.class),
     POTTED_AZALEA_BUSH(20430),
     POTTED_FLOWERING_AZALEA_BUSH(10609),
+
+    // Suki start - custom blocks and items
+
+    SUCRAFT_SNOWY_STONE_BRICKS(78131, MOSSY_STONE_BRICKS),
+    SUCRAFT_DIRTY_STONE_BRICKS(78132, SUCRAFT_SNOWY_STONE_BRICKS),
+    SUCRAFT_INFESTED_SNOWY_STONE_BRICKS(78133, INFESTED_MOSSY_STONE_BRICKS),
+    SUCRAFT_INFESTED_DIRTY_STONE_BRICKS(78134, SUCRAFT_INFESTED_SNOWY_STONE_BRICKS),
+    SUCRAFT_SPRUCE_BOOKSHELF(78135, BOOKSHELF),
+    SUCRAFT_BIRCH_BOOKSHELF(78136, SUCRAFT_SPRUCE_BOOKSHELF),
+    SUCRAFT_JUNGLE_BOOKSHELF(78137, SUCRAFT_SPRUCE_BOOKSHELF),
+    SUCRAFT_ACACIA_BOOKSHELF(78138, SUCRAFT_SPRUCE_BOOKSHELF),
+    SUCRAFT_DARK_OAK_BOOKSHELF(78139, SUCRAFT_SPRUCE_BOOKSHELF),
+    SUCRAFT_WARPED_BOOKSHELF(78140, SUCRAFT_SPRUCE_BOOKSHELF),
+    SUCRAFT_CRIMSON_BOOKSHELF(78141, SUCRAFT_SPRUCE_BOOKSHELF),
+    //    SUCRAFT_MANGROVE_BOOKSHELF(78142, BOOKSHELF);
+    SUCRAFT_BLACK_PLANKS(78143, OAK_PLANKS),
+    SUCRAFT_BLUE_PLANKS(78144, SUCRAFT_BLACK_PLANKS),
+    SUCRAFT_BROWN_PLANKS(78145, SUCRAFT_BLACK_PLANKS),
+    SUCRAFT_CYAN_PLANKS(78146, SUCRAFT_BLACK_PLANKS),
+    SUCRAFT_GRAY_PLANKS(78147, SUCRAFT_BLACK_PLANKS),
+    SUCRAFT_GREEN_PLANKS(78148, SUCRAFT_BLACK_PLANKS),
+    SUCRAFT_LIGHT_BLUE_PLANKS(78149, SUCRAFT_BLACK_PLANKS),
+    SUCRAFT_LIGHT_GRAY_PLANKS(78150, SUCRAFT_BLACK_PLANKS),
+    SUCRAFT_LIME_PLANKS(78151, SUCRAFT_BLACK_PLANKS),
+    SUCRAFT_MAGENTA_PLANKS(78152, SUCRAFT_BLACK_PLANKS),
+    SUCRAFT_ORANGE_PLANKS(78153, SUCRAFT_BLACK_PLANKS),
+    SUCRAFT_PINK_PLANKS(78154, SUCRAFT_BLACK_PLANKS),
+    SUCRAFT_PURPLE_PLANKS(78155, SUCRAFT_BLACK_PLANKS),
+    SUCRAFT_RED_PLANKS(78156, SUCRAFT_BLACK_PLANKS),
+    SUCRAFT_WHITE_PLANKS(78157, SUCRAFT_BLACK_PLANKS),
+    SUCRAFT_YELLOW_PLANKS(78158, SUCRAFT_BLACK_PLANKS),
+    SUCRAFT_DIRT_BRICKS(78159, DIRT),
+    SUCRAFT_POLISHED_CALCITE(78160, CALCITE),
+    SUCRAFT_POLISHED_DRIPSTONE(78161, DRIPSTONE_BLOCK),
+    SUCRAFT_POLISHED_TUFF(78162, TUFF),
+    SUCRAFT_ANDESITE_BRICKS(78163, POLISHED_ANDESITE),
+    SUCRAFT_CALCITE_BRICKS(78164, SUCRAFT_POLISHED_CALCITE),
+    SUCRAFT_DIORITE_BRICKS(78165, POLISHED_DIORITE),
+    SUCRAFT_DRIPSTONE_BRICKS(78166, SUCRAFT_POLISHED_DRIPSTONE),
+    SUCRAFT_GRANITE_BRICKS(78167, POLISHED_GRANITE),
+    SUCRAFT_TUFF_BRICKS(78168, SUCRAFT_POLISHED_TUFF),
+    SUCRAFT_CHISELED_ANDESITE_BRICKS(78169, SUCRAFT_ANDESITE_BRICKS),
+    SUCRAFT_CHISELED_CALCITE_BRICKS(78170, SUCRAFT_CALCITE_BRICKS),
+    SUCRAFT_CHISELED_DIORITE_BRICKS(78171, SUCRAFT_DIORITE_BRICKS),
+    SUCRAFT_CHISELED_DRIPSTONE_BRICKS(78172, SUCRAFT_DRIPSTONE_BRICKS),
+    SUCRAFT_CHISELED_GRANITE_BRICKS(78173, SUCRAFT_GRANITE_BRICKS),
+    SUCRAFT_CHISELED_TUFF_BRICKS(78174, SUCRAFT_TUFF_BRICKS),
+    SUCRAFT_SOUL_SANDSTONE(78175, SANDSTONE),
+    SUCRAFT_SANDSTONE_BRICKS(78176, SANDSTONE),
+    SUCRAFT_RED_SANDSTONE_BRICKS(78177, SUCRAFT_SANDSTONE_BRICKS),
+    SUCRAFT_CHISELED_SOUL_SANDSTONE(78178, SUCRAFT_SOUL_SANDSTONE),
+    SUCRAFT_CUT_SOUL_SANDSTONE(78179, SUCRAFT_SOUL_SANDSTONE),
+    SUCRAFT_SOUL_SANDSTONE_BRICKS(78180, SUCRAFT_SANDSTONE_BRICKS),
+    // Not included in initial release
+//    SUCRAFT_ANDESITE_COBBLESTONE(78181, COBBLESTONE),
+//    SUCRAFT_DIORITE_COBBLESTONE(78182, SUCRAFT_ANDESITE_COBBLESTONE),
+//    SUCRAFT_GRANITE_COBBLESTONE(78183, SUCRAFT_ANDESITE_COBBLESTONE),
+    SUCRAFT_CHISELED_PRISMARINE_BRICKS(78184, PRISMARINE_BRICKS),
+    SUCRAFT_ANDESITE_PILLAR(78185, QUARTZ_PILLAR),
+    SUCRAFT_CALCITE_PILLAR(78186, SUCRAFT_ANDESITE_PILLAR),
+    SUCRAFT_DIORITE_PILLAR(78187, SUCRAFT_ANDESITE_PILLAR),
+    SUCRAFT_DRIPSTONE_PILLAR(78188, SUCRAFT_ANDESITE_PILLAR),
+    SUCRAFT_GRANITE_PILLAR(78189, SUCRAFT_ANDESITE_PILLAR),
+    SUCRAFT_TUFF_PILLAR(78190, SUCRAFT_ANDESITE_PILLAR),
+    // Not included in initial release
+//    SUCRAFT_RUSTY_BIRCH_LEAVES(78191, BIRCH_LEAVES),
+    SUCRAFT_PALE_BIRCH_LEAVES(78192, BIRCH_LEAVES),
+    SUCRAFT_RED_OAK_LEAVES(78193, SUCRAFT_PALE_BIRCH_LEAVES),
+    SUCRAFT_ORANGE_OAK_LEAVES(78194, SUCRAFT_RED_OAK_LEAVES),
+    SUCRAFT_RED_MAPLE_LEAVES(78195, SUCRAFT_RED_OAK_LEAVES),
+    SUCRAFT_ORANGE_MAPLE_LEAVES(78196, SUCRAFT_RED_MAPLE_LEAVES),
+    SUCRAFT_YELLOW_MAPLE_LEAVES(78197, SUCRAFT_RED_MAPLE_LEAVES),
+    SUCRAFT_DIRT_SLAB(78198, MUD_BRICK_SLAB),
+    SUCRAFT_SNOWY_STONE_BRICK_SLAB(78199, STONE_BRICK_SLAB),
+    SUCRAFT_DIRTY_STONE_BRICK_SLAB(78200, SUCRAFT_SNOWY_STONE_BRICK_SLAB),
+    SUCRAFT_CRACKED_STONE_BRICK_SLAB(78201, STONE_BRICK_SLAB),
+    SUCRAFT_BLACK_PLANK_SLAB(78202, OAK_SLAB),
+    SUCRAFT_BLUE_PLANK_SLAB(78203, SUCRAFT_BLACK_PLANK_SLAB),
+    SUCRAFT_BROWN_PLANK_SLAB(78204, SUCRAFT_BLACK_PLANK_SLAB),
+    SUCRAFT_CYAN_PLANK_SLAB(78205, SUCRAFT_BLACK_PLANK_SLAB),
+    SUCRAFT_GRAY_PLANK_SLAB(78206, SUCRAFT_BLACK_PLANK_SLAB),
+    SUCRAFT_GREEN_PLANK_SLAB(78207, SUCRAFT_BLACK_PLANK_SLAB),
+    SUCRAFT_LIGHT_BLUE_PLANK_SLAB(78208, SUCRAFT_BLACK_PLANK_SLAB),
+    SUCRAFT_LIGHT_GRAY_PLANK_SLAB(78209, SUCRAFT_BLACK_PLANK_SLAB),
+    SUCRAFT_LIME_PLANK_SLAB(78210, SUCRAFT_BLACK_PLANK_SLAB),
+    SUCRAFT_MAGENTA_PLANK_SLAB(78211, SUCRAFT_BLACK_PLANK_SLAB),
+    SUCRAFT_ORANGE_PLANK_SLAB(78212, SUCRAFT_BLACK_PLANK_SLAB),
+    SUCRAFT_PINK_PLANK_SLAB(78213, SUCRAFT_BLACK_PLANK_SLAB),
+    SUCRAFT_PURPLE_PLANK_SLAB(78214, SUCRAFT_BLACK_PLANK_SLAB),
+    SUCRAFT_RED_PLANK_SLAB(78215, SUCRAFT_BLACK_PLANK_SLAB),
+    SUCRAFT_WHITE_PLANK_SLAB(78216, SUCRAFT_BLACK_PLANK_SLAB),
+    SUCRAFT_YELLOW_PLANK_SLAB(78217, SUCRAFT_BLACK_PLANK_SLAB),
+    SUCRAFT_BLACK_WOOL_SLAB(78218, OAK_SLAB),
+    SUCRAFT_BLUE_WOOL_SLAB(78219, SUCRAFT_BLACK_WOOL_SLAB),
+    SUCRAFT_BROWN_WOOL_SLAB(78220, SUCRAFT_BLACK_WOOL_SLAB),
+    SUCRAFT_CYAN_WOOL_SLAB(78221, SUCRAFT_BLACK_WOOL_SLAB),
+    SUCRAFT_GRAY_WOOL_SLAB(78222, SUCRAFT_BLACK_WOOL_SLAB),
+    SUCRAFT_GREEN_WOOL_SLAB(78223, SUCRAFT_BLACK_WOOL_SLAB),
+    SUCRAFT_LIGHT_BLUE_WOOL_SLAB(78224, SUCRAFT_BLACK_WOOL_SLAB),
+    SUCRAFT_LIGHT_GRAY_WOOL_SLAB(78225, SUCRAFT_BLACK_WOOL_SLAB),
+    SUCRAFT_LIME_WOOL_SLAB(78226, SUCRAFT_BLACK_WOOL_SLAB),
+    SUCRAFT_MAGENTA_WOOL_SLAB(78227, SUCRAFT_BLACK_WOOL_SLAB),
+    SUCRAFT_ORANGE_WOOL_SLAB(78228, SUCRAFT_BLACK_WOOL_SLAB),
+    SUCRAFT_PINK_WOOL_SLAB(78229, SUCRAFT_BLACK_WOOL_SLAB),
+    SUCRAFT_PURPLE_WOOL_SLAB(78230, SUCRAFT_BLACK_WOOL_SLAB),
+    SUCRAFT_RED_WOOL_SLAB(78231, SUCRAFT_BLACK_WOOL_SLAB),
+    SUCRAFT_WHITE_WOOL_SLAB(78232, SUCRAFT_BLACK_WOOL_SLAB),
+    SUCRAFT_YELLOW_WOOL_SLAB(78233, SUCRAFT_BLACK_WOOL_SLAB),
+    SUCRAFT_BLACK_CONCRETE_SLAB(78234, STONE_SLAB),
+    SUCRAFT_BLUE_CONCRETE_SLAB(78235, SUCRAFT_BLACK_CONCRETE_SLAB),
+    SUCRAFT_BROWN_CONCRETE_SLAB(78236, SUCRAFT_BLACK_CONCRETE_SLAB),
+    SUCRAFT_CYAN_CONCRETE_SLAB(78237, SUCRAFT_BLACK_CONCRETE_SLAB),
+    SUCRAFT_GRAY_CONCRETE_SLAB(78238, SUCRAFT_BLACK_CONCRETE_SLAB),
+    SUCRAFT_GREEN_CONCRETE_SLAB(78239, SUCRAFT_BLACK_CONCRETE_SLAB),
+    SUCRAFT_LIGHT_BLUE_CONCRETE_SLAB(78240, SUCRAFT_BLACK_CONCRETE_SLAB),
+    SUCRAFT_LIGHT_GRAY_CONCRETE_SLAB(78241, SUCRAFT_BLACK_CONCRETE_SLAB),
+    SUCRAFT_LIME_CONCRETE_SLAB(78242, SUCRAFT_BLACK_CONCRETE_SLAB),
+    SUCRAFT_MAGENTA_CONCRETE_SLAB(78243, SUCRAFT_BLACK_CONCRETE_SLAB),
+    SUCRAFT_ORANGE_CONCRETE_SLAB(78244, SUCRAFT_BLACK_CONCRETE_SLAB),
+    SUCRAFT_PINK_CONCRETE_SLAB(78245, SUCRAFT_BLACK_CONCRETE_SLAB),
+    SUCRAFT_PURPLE_CONCRETE_SLAB(78246, SUCRAFT_BLACK_CONCRETE_SLAB),
+    SUCRAFT_RED_CONCRETE_SLAB(78247, SUCRAFT_BLACK_CONCRETE_SLAB),
+    SUCRAFT_WHITE_CONCRETE_SLAB(78248, SUCRAFT_BLACK_CONCRETE_SLAB),
+    SUCRAFT_YELLOW_CONCRETE_SLAB(78249, SUCRAFT_BLACK_CONCRETE_SLAB),
+    SUCRAFT_BLACK_CONCRETE_POWDER_SLAB(78250, STONE_SLAB),
+    SUCRAFT_BLUE_CONCRETE_POWDER_SLAB(78251, SUCRAFT_BLACK_CONCRETE_POWDER_SLAB),
+    SUCRAFT_BROWN_CONCRETE_POWDER_SLAB(78252, SUCRAFT_BLACK_CONCRETE_POWDER_SLAB),
+    SUCRAFT_CYAN_CONCRETE_POWDER_SLAB(78253, SUCRAFT_BLACK_CONCRETE_POWDER_SLAB),
+    SUCRAFT_GRAY_CONCRETE_POWDER_SLAB(78254, SUCRAFT_BLACK_CONCRETE_POWDER_SLAB),
+    SUCRAFT_GREEN_CONCRETE_POWDER_SLAB(78255, SUCRAFT_BLACK_CONCRETE_POWDER_SLAB),
+    SUCRAFT_LIGHT_BLUE_CONCRETE_POWDER_SLAB(78256, SUCRAFT_BLACK_CONCRETE_POWDER_SLAB),
+    SUCRAFT_LIGHT_GRAY_CONCRETE_POWDER_SLAB(78257, SUCRAFT_BLACK_CONCRETE_POWDER_SLAB),
+    SUCRAFT_LIME_CONCRETE_POWDER_SLAB(78258, SUCRAFT_BLACK_CONCRETE_POWDER_SLAB),
+    SUCRAFT_MAGENTA_CONCRETE_POWDER_SLAB(78259, SUCRAFT_BLACK_CONCRETE_POWDER_SLAB),
+    SUCRAFT_ORANGE_CONCRETE_POWDER_SLAB(78260, SUCRAFT_BLACK_CONCRETE_POWDER_SLAB),
+    SUCRAFT_PINK_CONCRETE_POWDER_SLAB(78261, SUCRAFT_BLACK_CONCRETE_POWDER_SLAB),
+    SUCRAFT_PURPLE_CONCRETE_POWDER_SLAB(78262, SUCRAFT_BLACK_CONCRETE_POWDER_SLAB),
+    SUCRAFT_RED_CONCRETE_POWDER_SLAB(78263, SUCRAFT_BLACK_CONCRETE_POWDER_SLAB),
+    SUCRAFT_WHITE_CONCRETE_POWDER_SLAB(78264, SUCRAFT_BLACK_CONCRETE_POWDER_SLAB),
+    SUCRAFT_YELLOW_CONCRETE_POWDER_SLAB(78265, SUCRAFT_BLACK_CONCRETE_POWDER_SLAB),
+    SUCRAFT_BLACK_TERRACOTTA_SLAB(78266, STONE_SLAB),
+    SUCRAFT_BLUE_TERRACOTTA_SLAB(78267, SUCRAFT_BLACK_TERRACOTTA_SLAB),
+    SUCRAFT_BROWN_TERRACOTTA_SLAB(78268, SUCRAFT_BLACK_TERRACOTTA_SLAB),
+    SUCRAFT_CYAN_TERRACOTTA_SLAB(78269, SUCRAFT_BLACK_TERRACOTTA_SLAB),
+    SUCRAFT_GRAY_TERRACOTTA_SLAB(78270, SUCRAFT_BLACK_TERRACOTTA_SLAB),
+    SUCRAFT_GREEN_TERRACOTTA_SLAB(78271, SUCRAFT_BLACK_TERRACOTTA_SLAB),
+    SUCRAFT_LIGHT_BLUE_TERRACOTTA_SLAB(78272, SUCRAFT_BLACK_TERRACOTTA_SLAB),
+    SUCRAFT_LIGHT_GRAY_TERRACOTTA_SLAB(78273, SUCRAFT_BLACK_TERRACOTTA_SLAB),
+    SUCRAFT_LIME_TERRACOTTA_SLAB(78274, SUCRAFT_BLACK_TERRACOTTA_SLAB),
+    SUCRAFT_MAGENTA_TERRACOTTA_SLAB(78275, SUCRAFT_BLACK_TERRACOTTA_SLAB),
+    SUCRAFT_ORANGE_TERRACOTTA_SLAB(78276, SUCRAFT_BLACK_TERRACOTTA_SLAB),
+    SUCRAFT_PINK_TERRACOTTA_SLAB(78277, SUCRAFT_BLACK_TERRACOTTA_SLAB),
+    SUCRAFT_PURPLE_TERRACOTTA_SLAB(78278, SUCRAFT_BLACK_TERRACOTTA_SLAB),
+    SUCRAFT_RED_TERRACOTTA_SLAB(78279, SUCRAFT_BLACK_TERRACOTTA_SLAB),
+    SUCRAFT_WHITE_TERRACOTTA_SLAB(78280, SUCRAFT_BLACK_TERRACOTTA_SLAB),
+    SUCRAFT_YELLOW_TERRACOTTA_SLAB(78281, SUCRAFT_BLACK_TERRACOTTA_SLAB),
+    SUCRAFT_COARSE_DIRT_SLAB(78282, SUCRAFT_DIRT_SLAB),
+    SUCRAFT_SAND_SLAB(78283, SUCRAFT_DIRT_SLAB),
+    SUCRAFT_RED_SAND_SLAB(78284, SUCRAFT_SAND_SLAB),
+    SUCRAFT_CLAY_SLAB(78285, SUCRAFT_DIRT_SLAB),
+    SUCRAFT_MUD_SLAB(78286, SUCRAFT_DIRT_SLAB),
+    SUCRAFT_PACKED_MUD_SLAB(78287, SUCRAFT_MUD_SLAB),
+    SUCRAFT_AMETHYST_SLAB(78288, PURPUR_SLAB),
+    SUCRAFT_COAL_SLAB(78289, BLACKSTONE_SLAB),
+    SUCRAFT_OAK_BOOKSHELF_SLAB(78290, OAK_SLAB),
+    SUCRAFT_SPRUCE_BOOKSHELF_SLAB(78291, SPRUCE_SLAB),
+    SUCRAFT_BIRCH_BOOKSHELF_SLAB(78292, BIRCH_SLAB),
+    SUCRAFT_JUNGLE_BOOKSHELF_SLAB(78293, JUNGLE_SLAB),
+    SUCRAFT_CALCITE_SLAB(78294, STONE_SLAB),
+    SUCRAFT_DRIPSTONE_SLAB(78295, SUCRAFT_CALCITE_SLAB),
+    SUCRAFT_TUFF_SLAB(78296, SUCRAFT_CALCITE_SLAB),
+    SUCRAFT_POLISHED_CALCITE_SLAB(78297, SUCRAFT_CALCITE_SLAB),
+    SUCRAFT_POLISHED_DRIPSTONE_SLAB(78298, SUCRAFT_POLISHED_CALCITE_SLAB),
+    SUCRAFT_POLISHED_TUFF_SLAB(78299, SUCRAFT_POLISHED_CALCITE_SLAB),
+    SUCRAFT_ANDESITE_BRICK_SLAB(78300, POLISHED_ANDESITE_SLAB),
+    SUCRAFT_CALCITE_BRICK_SLAB(78301, SUCRAFT_POLISHED_CALCITE_SLAB),
+    SUCRAFT_DIORITE_BRICK_SLAB(78302, POLISHED_DIORITE_SLAB),
+    SUCRAFT_DRIPSTONE_BRICK_SLAB(78303, SUCRAFT_POLISHED_DRIPSTONE_SLAB),
+    SUCRAFT_GRANITE_BRICK_SLAB(78304, POLISHED_GRANITE_SLAB),
+    SUCRAFT_TUFF_BRICK_SLAB(78305, SUCRAFT_POLISHED_TUFF_SLAB),
+    SUCRAFT_ANDESITE_PILLAR_SLAB(78306, SUCRAFT_ANDESITE_BRICK_SLAB),
+    SUCRAFT_CALCITE_PILLAR_SLAB(78307, SUCRAFT_CALCITE_BRICK_SLAB),
+    SUCRAFT_DIORITE_PILLAR_SLAB(78308, SUCRAFT_DIORITE_BRICK_SLAB),
+    SUCRAFT_DRIPSTONE_PILLAR_SLAB(78309, SUCRAFT_DRIPSTONE_BRICK_SLAB),
+    SUCRAFT_GRANITE_PILLAR_SLAB(78310, SUCRAFT_GRANITE_BRICK_SLAB),
+    SUCRAFT_TUFF_PILLAR_SLAB(78311, SUCRAFT_TUFF_BRICK_SLAB),
+    SUCRAFT_SOUL_SANDSTONE_SLAB(78312, SANDSTONE_SLAB),
+    SUCRAFT_SANDSTONE_BRICK_SLAB(78313, SANDSTONE_SLAB),
+    SUCRAFT_RED_SANDSTONE_BRICK_SLAB(78314, SUCRAFT_SANDSTONE_BRICK_SLAB),
+    SUCRAFT_SOUL_SANDSTONE_BRICK_SLAB(78315, SUCRAFT_SANDSTONE_BRICK_SLAB),
+    SUCRAFT_SMOOTH_SOUL_SANDSTONE(78316, SMOOTH_SANDSTONE),
+    SUCRAFT_SMOOTH_SOUL_SANDSTONE_SLAB(78317, SMOOTH_SANDSTONE_SLAB),
+    SUCRAFT_CUT_SOUL_SANDSTONE_SLAB(78318, CUT_SANDSTONE_SLAB),
+    SUCRAFT_GRAVEL_SLAB(78319, MUD_BRICK_SLAB),
+    SUCRAFT_NETHERRACK_SLAB(78320, MUD_BRICK_SLAB),
+    SUCRAFT_SOUL_SOIL_SLAB(78321, MUD_BRICK_SLAB),
+    SUCRAFT_RAW_COPPER_SLAB(78322, CUT_COPPER_SLAB),
+    SUCRAFT_RAW_GOLD_SLAB(78323, SUCRAFT_RAW_COPPER_SLAB),
+    SUCRAFT_RAW_IRON_SLAB(78324, SUCRAFT_RAW_COPPER_SLAB),
+    SUCRAFT_ANCIENT_DEBRIS_SLAB(78325, CUT_COPPER_SLAB),
+    SUCRAFT_DIRT_BRICK_SLAB(78326, SUCRAFT_DIRT_SLAB),
+    // Not included in initial release
+//    SUCRAFT_STONE_PILLAR(78327, SUCRAFT_ANDESITE_PILLAR),
+//    SUCRAFT_STONE_PILLAR_SLAB(78328, STONE_SLAB),
+    SUCRAFT_OAK_LOG_SLAB(78329, OAK_SLAB),
+    SUCRAFT_SPRUCE_LOG_SLAB(78330, SPRUCE_SLAB),
+    SUCRAFT_BIRCH_LOG_SLAB(78331, BIRCH_SLAB),
+    SUCRAFT_JUNGLE_LOG_SLAB(78332, JUNGLE_SLAB),
+    SUCRAFT_ACACIA_LOG_SLAB(78333, ACACIA_SLAB),
+    SUCRAFT_DARK_OAK_LOG_SLAB(78334, DARK_OAK_SLAB),
+    SUCRAFT_WARPED_STEM_SLAB(78335, WARPED_SLAB),
+    SUCRAFT_CRIMSON_STEM_SLAB(78336, CRIMSON_SLAB),
+    SUCRAFT_MANGROVE_LOG_SLAB(78337, MANGROVE_SLAB),
+    SUCRAFT_STRIPPED_OAK_LOG_SLAB(78338, OAK_SLAB),
+    SUCRAFT_STRIPPED_SPRUCE_LOG_SLAB(78339, SPRUCE_SLAB),
+    SUCRAFT_STRIPPED_BIRCH_LOG_SLAB(78340, BIRCH_SLAB),
+    SUCRAFT_STRIPPED_JUNGLE_LOG_SLAB(78341, JUNGLE_SLAB),
+    SUCRAFT_STRIPPED_ACACIA_LOG_SLAB(78342, ACACIA_SLAB),
+    SUCRAFT_STRIPPED_DARK_OAK_LOG_SLAB(78343, DARK_OAK_SLAB),
+    SUCRAFT_STRIPPED_WARPED_STEM_SLAB(78344, WARPED_SLAB),
+    SUCRAFT_STRIPPED_CRIMSON_STEM_SLAB(78345, CRIMSON_SLAB),
+    SUCRAFT_STRIPPED_MANGROVE_LOG_SLAB(78346, MANGROVE_SLAB),
+    SUCRAFT_OAK_WOOD_SLAB(78347, OAK_SLAB),
+    SUCRAFT_SPRUCE_WOOD_SLAB(78348, SPRUCE_SLAB),
+    SUCRAFT_BIRCH_WOOD_SLAB(78349, BIRCH_SLAB),
+    SUCRAFT_JUNGLE_WOOD_SLAB(78350, JUNGLE_SLAB),
+    SUCRAFT_ACACIA_WOOD_SLAB(78351, ACACIA_SLAB),
+    SUCRAFT_DARK_OAK_WOOD_SLAB(78352, DARK_OAK_SLAB),
+    SUCRAFT_WARPED_HYPHAE_SLAB(78353, WARPED_SLAB),
+    SUCRAFT_CRIMSON_HYPHAE_SLAB(78354, CRIMSON_SLAB),
+    SUCRAFT_MANGROVE_WOOD_SLAB(78355, MANGROVE_SLAB),
+    SUCRAFT_STRIPPED_OAK_WOOD_SLAB(78356, OAK_SLAB),
+    SUCRAFT_STRIPPED_SPRUCE_WOOD_SLAB(78357, SPRUCE_SLAB),
+    SUCRAFT_STRIPPED_BIRCH_WOOD_SLAB(78358, BIRCH_SLAB),
+    SUCRAFT_STRIPPED_JUNGLE_WOOD_SLAB(78359, JUNGLE_SLAB),
+    SUCRAFT_STRIPPED_ACACIA_WOOD_SLAB(78360, ACACIA_SLAB),
+    SUCRAFT_STRIPPED_DARK_OAK_WOOD_SLAB(78361, DARK_OAK_SLAB),
+    SUCRAFT_STRIPPED_WARPED_HYPHAE_SLAB(78362, WARPED_SLAB),
+    SUCRAFT_STRIPPED_CRIMSON_HYPHAE_SLAB(78363, CRIMSON_SLAB),
+    SUCRAFT_STRIPPED_MANGROVE_WOOD_SLAB(78364, MANGROVE_SLAB),
+    SUCRAFT_BONE_SLAB(78365, SMOOTH_QUARTZ_SLAB),
+    SUCRAFT_WITHER_BONE_BLOCK(78366, BONE_BLOCK),
+    SUCRAFT_WITHER_BONE_SLAB(78367, SUCRAFT_BONE_SLAB),
+    SUCRAFT_BASALT_SLAB(78368, COBBLESTONE_SLAB),
+    SUCRAFT_POLISHED_BASALT_SLAB(78369, SUCRAFT_BASALT_SLAB),
+    SUCRAFT_SMOOTH_BASALT_SLAB(78370, SUCRAFT_BASALT_SLAB),
+    SUCRAFT_CHARCOAL_BLOCK(78371, COAL_BLOCK),
+    SUCRAFT_CHARCOAL_SLAB(78372, SUCRAFT_COAL_SLAB),
+    SUCRAFT_GUNPOWDER_BLOCK(78373, LIGHT_GRAY_CONCRETE_POWDER),
+    SUCRAFT_GUNPOWDER_SLAB(78374, SUCRAFT_LIGHT_GRAY_CONCRETE_POWDER_SLAB),
+    SUCRAFT_PEAT(78375, COARSE_DIRT),
+    SUCRAFT_SMOULDERING_PEAT(78376, SUCRAFT_PEAT),
+    SUCRAFT_PEAT_SLAB(78377, SUCRAFT_COARSE_DIRT_SLAB),
+    // Not included in initial release
+//    SUCRAFT_SCULK_SLAB(78378, BLACKSTONE_SLAB),
+    SUCRAFT_CHISELED_QUARTZ_SLAB(78379, QUARTZ_SLAB),
+    SUCRAFT_QUARTZ_PILLAR_SLAB(78380, QUARTZ_SLAB),
+    SUCRAFT_QUARTZ_BRICK_SLAB(78381, QUARTZ_SLAB),
+    // Not included in initial release
+//    SUCRAFT_DRIED_KELP_SLAB(78382, MUD_BRICK_SLAB),
+    SUCRAFT_RED_FIRE(78383, SOUL_FIRE),
+    SUCRAFT_ORANGE_FIRE(78384, SUCRAFT_RED_FIRE),
+    SUCRAFT_YELLOW_FIRE(78385, SUCRAFT_RED_FIRE),
+    SUCRAFT_LIME_FIRE(78386, SUCRAFT_RED_FIRE),
+    SUCRAFT_GREEN_FIRE(78387, SUCRAFT_RED_FIRE),
+    SUCRAFT_CYAN_FIRE(78388, SUCRAFT_RED_FIRE),
+    SUCRAFT_LIGHT_BLUE_FIRE(78389, SUCRAFT_RED_FIRE),
+    SUCRAFT_BLUE_FIRE(78390, SUCRAFT_RED_FIRE),
+    SUCRAFT_BLACK_FIRE(78391, SUCRAFT_RED_FIRE),
+    SUCRAFT_GRAY_FIRE(78392, SUCRAFT_RED_FIRE),
+    SUCRAFT_LIGHT_GRAY_FIRE(78393, SUCRAFT_RED_FIRE),
+    SUCRAFT_WHITE_FIRE(78394, SUCRAFT_RED_FIRE),
+    SUCRAFT_BROWN_FIRE(78395, SUCRAFT_RED_FIRE),
+    SUCRAFT_PURPLE_FIRE(78396, SUCRAFT_RED_FIRE),
+    SUCRAFT_MAGENTA_FIRE(78397, SUCRAFT_RED_FIRE),
+    SUCRAFT_PINK_FIRE(78398, SUCRAFT_RED_FIRE),
+    SUCRAFT_PAPER_BLOCK(78399, WHITE_WOOL),
+    SUCRAFT_PAPER_SLAB(78400, SUCRAFT_WHITE_WOOL_SLAB),
+    SUCRAFT_QUARTZ_SPIRAL_MEANDER(78401, CHISELED_QUARTZ_BLOCK),
+    SUCRAFT_QUARTZ_SPIRAL_MEANDER_SLAB(78402, SUCRAFT_CHISELED_QUARTZ_SLAB),
+    // Not included in initial release
+//    SUCRAFT_ENDER_PEARL_BLOCK(78403, AMETHYST_BLOCK),
+    SUCRAFT_FLINT_BLOCK(78404, COAL_BLOCK),
+    SUCRAFT_FLINT_PILLAR(78405, SUCRAFT_FLINT_BLOCK),
+    SUCRAFT_FLINT_PILLAR_SLAB(78406, BLACKSTONE_SLAB),
+    SUCRAFT_FLINT_TILES(78407, SUCRAFT_FLINT_BLOCK),
+    SUCRAFT_FLINT_TILE_SLAB(78408, SUCRAFT_FLINT_PILLAR_SLAB),
+    SUCRAFT_OBSIDIAN_SLAB(78409, BLACKSTONE_SLAB),
+    SUCRAFT_CRYING_OBSIDIAN_SLAB(78410, SUCRAFT_OBSIDIAN_SLAB),
+    SUCRAFT_GILDED_BLACKSTONE_SLAB(78411, BLACKSTONE_SLAB),
+    SUCRAFT_SNOWY_STONE_BRICK_STAIRS(78412, STONE_BRICK_STAIRS),
+    SUCRAFT_DIRTY_STONE_BRICK_STAIRS(78413, SUCRAFT_SNOWY_STONE_BRICK_STAIRS),
+    SUCRAFT_CRACKED_STONE_BRICK_STAIRS(78414, STONE_BRICK_STAIRS),
+    SUCRAFT_AMETHYST_STAIRS(78415, PURPUR_STAIRS),
+    SUCRAFT_COAL_STAIRS(78416, BLACKSTONE_STAIRS),
+    SUCRAFT_DRIPSTONE_STAIRS(78417, STONE_STAIRS),
+    SUCRAFT_DIRT_BRICK_STAIRS(78418, MUD_BRICK_STAIRS),
+    SUCRAFT_CHARCOAL_STAIRS(78419, SUCRAFT_COAL_STAIRS),
+    SUCRAFT_GUNPOWDER_STAIRS(78420, STONE_STAIRS),
+    SUCRAFT_PEAT_STAIRS(78421, SUCRAFT_DIRT_BRICK_STAIRS),
+    SUCRAFT_FLINT_TILE_STAIRS(78422, BLACKSTONE_STAIRS),
+    SUCRAFT_BLACK_PLANK_STAIRS(78423, OAK_STAIRS),
+    SUCRAFT_BLUE_PLANK_STAIRS(78424, SUCRAFT_BLACK_PLANK_STAIRS),
+    SUCRAFT_BROWN_PLANK_STAIRS(78425, SUCRAFT_BLACK_PLANK_STAIRS),
+    SUCRAFT_CYAN_PLANK_STAIRS(78426, SUCRAFT_BLACK_PLANK_STAIRS),
+    SUCRAFT_GRAY_PLANK_STAIRS(78427, SUCRAFT_BLACK_PLANK_STAIRS),
+    SUCRAFT_GREEN_PLANK_STAIRS(78428, SUCRAFT_BLACK_PLANK_STAIRS),
+    SUCRAFT_LIGHT_BLUE_PLANK_STAIRS(78429, SUCRAFT_BLACK_PLANK_STAIRS),
+    SUCRAFT_LIGHT_GRAY_PLANK_STAIRS(78430, SUCRAFT_BLACK_PLANK_STAIRS),
+    SUCRAFT_LIME_PLANK_STAIRS(78431, SUCRAFT_BLACK_PLANK_STAIRS),
+    SUCRAFT_MAGENTA_PLANK_STAIRS(78432, SUCRAFT_BLACK_PLANK_STAIRS),
+    SUCRAFT_ORANGE_PLANK_STAIRS(78433, SUCRAFT_BLACK_PLANK_STAIRS),
+    SUCRAFT_PINK_PLANK_STAIRS(78434, SUCRAFT_BLACK_PLANK_STAIRS),
+    SUCRAFT_PURPLE_PLANK_STAIRS(78435, SUCRAFT_BLACK_PLANK_STAIRS),
+    SUCRAFT_RED_PLANK_STAIRS(78436, SUCRAFT_BLACK_PLANK_STAIRS),
+    SUCRAFT_WHITE_PLANK_STAIRS(78437, SUCRAFT_BLACK_PLANK_STAIRS),
+    SUCRAFT_YELLOW_PLANK_STAIRS(78438, SUCRAFT_BLACK_PLANK_STAIRS),
+    SUCRAFT_BLACK_WOOL_STAIRS(78439, OAK_STAIRS),
+    SUCRAFT_BLUE_WOOL_STAIRS(78440, SUCRAFT_BLACK_WOOL_STAIRS),
+    SUCRAFT_BROWN_WOOL_STAIRS(78441, SUCRAFT_BLACK_WOOL_STAIRS),
+    SUCRAFT_CYAN_WOOL_STAIRS(78442, SUCRAFT_BLACK_WOOL_STAIRS),
+    SUCRAFT_GRAY_WOOL_STAIRS(78443, SUCRAFT_BLACK_WOOL_STAIRS),
+    SUCRAFT_GREEN_WOOL_STAIRS(78444, SUCRAFT_BLACK_WOOL_STAIRS),
+    SUCRAFT_LIGHT_BLUE_WOOL_STAIRS(78445, SUCRAFT_BLACK_WOOL_STAIRS),
+    SUCRAFT_LIGHT_GRAY_WOOL_STAIRS(78446, SUCRAFT_BLACK_WOOL_STAIRS),
+    SUCRAFT_LIME_WOOL_STAIRS(78447, SUCRAFT_BLACK_WOOL_STAIRS),
+    SUCRAFT_MAGENTA_WOOL_STAIRS(78448, SUCRAFT_BLACK_WOOL_STAIRS),
+    SUCRAFT_ORANGE_WOOL_STAIRS(78449, SUCRAFT_BLACK_WOOL_STAIRS),
+    SUCRAFT_PINK_WOOL_STAIRS(78450, SUCRAFT_BLACK_WOOL_STAIRS),
+    SUCRAFT_PURPLE_WOOL_STAIRS(78451, SUCRAFT_BLACK_WOOL_STAIRS),
+    SUCRAFT_RED_WOOL_STAIRS(78452, SUCRAFT_BLACK_WOOL_STAIRS),
+    SUCRAFT_WHITE_WOOL_STAIRS(78453, SUCRAFT_BLACK_WOOL_STAIRS),
+    SUCRAFT_YELLOW_WOOL_STAIRS(78454, SUCRAFT_BLACK_WOOL_STAIRS),
+    SUCRAFT_BLACK_CONCRETE_STAIRS(78455, STONE_STAIRS),
+    SUCRAFT_BLUE_CONCRETE_STAIRS(78456, SUCRAFT_BLACK_CONCRETE_STAIRS),
+    SUCRAFT_BROWN_CONCRETE_STAIRS(78457, SUCRAFT_BLACK_CONCRETE_STAIRS),
+    SUCRAFT_CYAN_CONCRETE_STAIRS(78458, SUCRAFT_BLACK_CONCRETE_STAIRS),
+    SUCRAFT_GRAY_CONCRETE_STAIRS(78459, SUCRAFT_BLACK_CONCRETE_STAIRS),
+    SUCRAFT_GREEN_CONCRETE_STAIRS(78460, SUCRAFT_BLACK_CONCRETE_STAIRS),
+    SUCRAFT_LIGHT_BLUE_CONCRETE_STAIRS(78461, SUCRAFT_BLACK_CONCRETE_STAIRS),
+    SUCRAFT_LIGHT_GRAY_CONCRETE_STAIRS(78462, SUCRAFT_BLACK_CONCRETE_STAIRS),
+    SUCRAFT_LIME_CONCRETE_STAIRS(78463, SUCRAFT_BLACK_CONCRETE_STAIRS),
+    SUCRAFT_MAGENTA_CONCRETE_STAIRS(78464, SUCRAFT_BLACK_CONCRETE_STAIRS),
+    SUCRAFT_ORANGE_CONCRETE_STAIRS(78465, SUCRAFT_BLACK_CONCRETE_STAIRS),
+    SUCRAFT_PINK_CONCRETE_STAIRS(78466, SUCRAFT_BLACK_CONCRETE_STAIRS),
+    SUCRAFT_PURPLE_CONCRETE_STAIRS(78467, SUCRAFT_BLACK_CONCRETE_STAIRS),
+    SUCRAFT_RED_CONCRETE_STAIRS(78468, SUCRAFT_BLACK_CONCRETE_STAIRS),
+    SUCRAFT_WHITE_CONCRETE_STAIRS(78469, SUCRAFT_BLACK_CONCRETE_STAIRS),
+    SUCRAFT_YELLOW_CONCRETE_STAIRS(78470, SUCRAFT_BLACK_CONCRETE_STAIRS),
+    SUCRAFT_BLACK_CONCRETE_POWDER_STAIRS(78471, STONE_STAIRS),
+    SUCRAFT_BLUE_CONCRETE_POWDER_STAIRS(78472, SUCRAFT_BLACK_CONCRETE_POWDER_STAIRS),
+    SUCRAFT_BROWN_CONCRETE_POWDER_STAIRS(78473, SUCRAFT_BLACK_CONCRETE_POWDER_STAIRS),
+    SUCRAFT_CYAN_CONCRETE_POWDER_STAIRS(78474, SUCRAFT_BLACK_CONCRETE_POWDER_STAIRS),
+    SUCRAFT_GRAY_CONCRETE_POWDER_STAIRS(78475, SUCRAFT_BLACK_CONCRETE_POWDER_STAIRS),
+    SUCRAFT_GREEN_CONCRETE_POWDER_STAIRS(78476, SUCRAFT_BLACK_CONCRETE_POWDER_STAIRS),
+    SUCRAFT_LIGHT_BLUE_CONCRETE_POWDER_STAIRS(78477, SUCRAFT_BLACK_CONCRETE_POWDER_STAIRS),
+    SUCRAFT_LIGHT_GRAY_CONCRETE_POWDER_STAIRS(78478, SUCRAFT_BLACK_CONCRETE_POWDER_STAIRS),
+    SUCRAFT_LIME_CONCRETE_POWDER_STAIRS(78479, SUCRAFT_BLACK_CONCRETE_POWDER_STAIRS),
+    SUCRAFT_MAGENTA_CONCRETE_POWDER_STAIRS(78480, SUCRAFT_BLACK_CONCRETE_POWDER_STAIRS),
+    SUCRAFT_ORANGE_CONCRETE_POWDER_STAIRS(78481, SUCRAFT_BLACK_CONCRETE_POWDER_STAIRS),
+    SUCRAFT_PINK_CONCRETE_POWDER_STAIRS(78482, SUCRAFT_BLACK_CONCRETE_POWDER_STAIRS),
+    SUCRAFT_PURPLE_CONCRETE_POWDER_STAIRS(78483, SUCRAFT_BLACK_CONCRETE_POWDER_STAIRS),
+    SUCRAFT_RED_CONCRETE_POWDER_STAIRS(78484, SUCRAFT_BLACK_CONCRETE_POWDER_STAIRS),
+    SUCRAFT_WHITE_CONCRETE_POWDER_STAIRS(78485, SUCRAFT_BLACK_CONCRETE_POWDER_STAIRS),
+    SUCRAFT_YELLOW_CONCRETE_POWDER_STAIRS(78486, SUCRAFT_BLACK_CONCRETE_POWDER_STAIRS),
+    SUCRAFT_BLACK_TERRACOTTA_STAIRS(78487, STONE_STAIRS),
+    SUCRAFT_BLUE_TERRACOTTA_STAIRS(78488, SUCRAFT_BLACK_TERRACOTTA_STAIRS),
+    SUCRAFT_BROWN_TERRACOTTA_STAIRS(78489, SUCRAFT_BLACK_TERRACOTTA_STAIRS),
+    SUCRAFT_CYAN_TERRACOTTA_STAIRS(78490, SUCRAFT_BLACK_TERRACOTTA_STAIRS),
+    SUCRAFT_GRAY_TERRACOTTA_STAIRS(78491, SUCRAFT_BLACK_TERRACOTTA_STAIRS),
+    SUCRAFT_GREEN_TERRACOTTA_STAIRS(78492, SUCRAFT_BLACK_TERRACOTTA_STAIRS),
+    SUCRAFT_LIGHT_BLUE_TERRACOTTA_STAIRS(78493, SUCRAFT_BLACK_TERRACOTTA_STAIRS),
+    SUCRAFT_LIGHT_GRAY_TERRACOTTA_STAIRS(78494, SUCRAFT_BLACK_TERRACOTTA_STAIRS),
+    SUCRAFT_LIME_TERRACOTTA_STAIRS(78495, SUCRAFT_BLACK_TERRACOTTA_STAIRS),
+    SUCRAFT_MAGENTA_TERRACOTTA_STAIRS(78496, SUCRAFT_BLACK_TERRACOTTA_STAIRS),
+    SUCRAFT_ORANGE_TERRACOTTA_STAIRS(78497, SUCRAFT_BLACK_TERRACOTTA_STAIRS),
+    SUCRAFT_PINK_TERRACOTTA_STAIRS(78498, SUCRAFT_BLACK_TERRACOTTA_STAIRS),
+    SUCRAFT_PURPLE_TERRACOTTA_STAIRS(78499, SUCRAFT_BLACK_TERRACOTTA_STAIRS),
+    SUCRAFT_RED_TERRACOTTA_STAIRS(78500, SUCRAFT_BLACK_TERRACOTTA_STAIRS),
+    SUCRAFT_WHITE_TERRACOTTA_STAIRS(78501, SUCRAFT_BLACK_TERRACOTTA_STAIRS),
+    SUCRAFT_YELLOW_TERRACOTTA_STAIRS(78502, SUCRAFT_BLACK_TERRACOTTA_STAIRS),
+    SUCRAFT_POLISHED_CALCITE_STAIRS(78503, STONE_STAIRS),
+    SUCRAFT_POLISHED_DRIPSTONE_STAIRS(78504, SUCRAFT_POLISHED_CALCITE_STAIRS),
+    SUCRAFT_POLISHED_TUFF_STAIRS(78505, SUCRAFT_POLISHED_CALCITE_STAIRS),
+    SUCRAFT_ANDESITE_BRICK_STAIRS(78506, POLISHED_ANDESITE_STAIRS),
+    SUCRAFT_CALCITE_BRICK_STAIRS(78507, SUCRAFT_POLISHED_CALCITE_STAIRS),
+    SUCRAFT_DIORITE_BRICK_STAIRS(78508, POLISHED_DIORITE_STAIRS),
+    SUCRAFT_DRIPSTONE_BRICK_STAIRS(78509, SUCRAFT_POLISHED_DRIPSTONE_STAIRS),
+    SUCRAFT_GRANITE_BRICK_STAIRS(78510, POLISHED_GRANITE_STAIRS),
+    SUCRAFT_TUFF_BRICK_STAIRS(78511, SUCRAFT_POLISHED_TUFF_STAIRS),
+    SUCRAFT_QUARTZ_BRICK_STAIRS(78512, QUARTZ_STAIRS),
+    SUCRAFT_SANDSTONE_BRICK_STAIRS(78513, SANDSTONE_STAIRS),
+    SUCRAFT_RED_SANDSTONE_BRICK_STAIRS(78514, SUCRAFT_SANDSTONE_BRICK_STAIRS),
+    SUCRAFT_SOUL_SANDSTONE_BRICK_STAIRS(78515, SUCRAFT_SANDSTONE_BRICK_STAIRS),
+    SUCRAFT_RAW_COPPER_STAIRS(78516, CUT_COPPER_STAIRS),
+    SUCRAFT_RAW_GOLD_STAIRS(78517, SUCRAFT_RAW_COPPER_STAIRS),
+    SUCRAFT_RAW_IRON_STAIRS(78518, SUCRAFT_RAW_COPPER_STAIRS),
+    SUCRAFT_DIRT_STAIRS(78519, MUD_BRICK_STAIRS),
+    SUCRAFT_COARSE_DIRT_STAIRS(78520, SUCRAFT_DIRT_STAIRS),
+    SUCRAFT_SAND_STAIRS(78521, SUCRAFT_DIRT_STAIRS),
+    SUCRAFT_RED_SAND_STAIRS(78522, SUCRAFT_SAND_STAIRS),
+    SUCRAFT_CLAY_STAIRS(78523, SUCRAFT_DIRT_STAIRS),
+    SUCRAFT_MUD_STAIRS(78524, SUCRAFT_DIRT_STAIRS),
+    SUCRAFT_PACKED_MUD_STAIRS(78525, SUCRAFT_MUD_STAIRS),
+    SUCRAFT_CALCITE_STAIRS(78526, STONE_STAIRS),
+    SUCRAFT_TUFF_STAIRS(78527, SUCRAFT_CALCITE_STAIRS),
+    SUCRAFT_GRAVEL_STAIRS(78528, MUD_BRICK_STAIRS),
+    SUCRAFT_NETHERRACK_STAIRS(78529, MUD_BRICK_STAIRS),
+    SUCRAFT_SOUL_SOIL_STAIRS(78530, MUD_BRICK_STAIRS),
+    SUCRAFT_SMOOTH_BASALT_STAIRS(78531, COBBLESTONE_STAIRS),
+    // Not included in initial release
+//    SUCRAFT_SCULK_STAIRS(78532, BLACKSTONE_STAIRS),
+    SUCRAFT_OBSIDIAN_STAIRS(78533, BLACKSTONE_STAIRS),
+    SUCRAFT_CRYING_OBSIDIAN_STAIRS(78534, SUCRAFT_OBSIDIAN_STAIRS),
+    SUCRAFT_GILDED_BLACKSTONE_STAIRS(78535, BLACKSTONE_STAIRS),
+    SUCRAFT_SOUL_SANDSTONE_STAIRS(78536, SANDSTONE_STAIRS),
+    SUCRAFT_SMOOTH_SOUL_SANDSTONE_STAIRS(78537, SMOOTH_SANDSTONE_STAIRS),
+    SUCRAFT_CUT_SOUL_SANDSTONE_STAIRS(78538, SMOOTH_SANDSTONE_STAIRS),
+    SUCRAFT_ANCIENT_DEBRIS_STAIRS(78539, CUT_COPPER_STAIRS),
+    SUCRAFT_QUARTZ_SPIRAL_MEANDER_STAIRS(78540, QUARTZ_STAIRS),
+    SUCRAFT_CHISELED_QUARTZ_STAIRS(78541, QUARTZ_STAIRS),
+    SUCRAFT_WITHER_BONE_STAIRS(78542, SMOOTH_QUARTZ_STAIRS),
+    SUCRAFT_PAPER_STAIRS(78543, SUCRAFT_WHITE_WOOL_STAIRS),
+    SUCRAFT_FLINT_PILLAR_STAIRS(78544, BLACKSTONE_STAIRS),
+    SUCRAFT_OAK_BOOKSHELF_STAIRS(78545, OAK_STAIRS),
+    SUCRAFT_SPRUCE_BOOKSHELF_STAIRS(78546, SPRUCE_STAIRS),
+    SUCRAFT_BIRCH_BOOKSHELF_STAIRS(78547, BIRCH_STAIRS),
+    SUCRAFT_JUNGLE_BOOKSHELF_STAIRS(78548, JUNGLE_STAIRS),
+    SUCRAFT_OAK_LOG_STAIRS(78549, OAK_STAIRS),
+    SUCRAFT_SPRUCE_LOG_STAIRS(78550, SPRUCE_STAIRS),
+    SUCRAFT_BIRCH_LOG_STAIRS(78551, BIRCH_STAIRS),
+    SUCRAFT_JUNGLE_LOG_STAIRS(78552, JUNGLE_STAIRS),
+    SUCRAFT_ACACIA_LOG_STAIRS(78553, ACACIA_STAIRS),
+    SUCRAFT_DARK_OAK_LOG_STAIRS(78554, DARK_OAK_STAIRS),
+    SUCRAFT_WARPED_STEM_STAIRS(78555, WARPED_STAIRS),
+    SUCRAFT_CRIMSON_STEM_STAIRS(78556, CRIMSON_STAIRS),
+    SUCRAFT_MANGROVE_LOG_STAIRS(78557, MANGROVE_STAIRS),
+    SUCRAFT_STRIPPED_OAK_LOG_STAIRS(78558, OAK_STAIRS),
+    SUCRAFT_STRIPPED_SPRUCE_LOG_STAIRS(78559, SPRUCE_STAIRS),
+    SUCRAFT_STRIPPED_BIRCH_LOG_STAIRS(78560, BIRCH_STAIRS),
+    SUCRAFT_STRIPPED_JUNGLE_LOG_STAIRS(78561, JUNGLE_STAIRS),
+    SUCRAFT_STRIPPED_ACACIA_LOG_STAIRS(78562, ACACIA_STAIRS),
+    SUCRAFT_STRIPPED_DARK_OAK_LOG_STAIRS(78563, DARK_OAK_STAIRS),
+    SUCRAFT_STRIPPED_WARPED_STEM_STAIRS(78564, WARPED_STAIRS),
+    SUCRAFT_STRIPPED_CRIMSON_STEM_STAIRS(78565, CRIMSON_STAIRS),
+    SUCRAFT_STRIPPED_MANGROVE_LOG_STAIRS(78566, MANGROVE_STAIRS),
+    SUCRAFT_OAK_WOOD_STAIRS(78567, OAK_STAIRS),
+    SUCRAFT_SPRUCE_WOOD_STAIRS(78568, SPRUCE_STAIRS),
+    SUCRAFT_BIRCH_WOOD_STAIRS(78569, BIRCH_STAIRS),
+    SUCRAFT_JUNGLE_WOOD_STAIRS(78570, JUNGLE_STAIRS),
+    SUCRAFT_ACACIA_WOOD_STAIRS(78571, ACACIA_STAIRS),
+    SUCRAFT_DARK_OAK_WOOD_STAIRS(78572, DARK_OAK_STAIRS),
+    SUCRAFT_WARPED_HYPHAE_STAIRS(78573, WARPED_STAIRS),
+    SUCRAFT_CRIMSON_HYPHAE_STAIRS(78574, CRIMSON_STAIRS),
+    SUCRAFT_MANGROVE_WOOD_STAIRS(78575, MANGROVE_STAIRS),
+    SUCRAFT_STRIPPED_OAK_WOOD_STAIRS(78576, OAK_STAIRS),
+    SUCRAFT_STRIPPED_SPRUCE_WOOD_STAIRS(78577, SPRUCE_STAIRS),
+    SUCRAFT_STRIPPED_BIRCH_WOOD_STAIRS(78578, BIRCH_STAIRS),
+    SUCRAFT_STRIPPED_JUNGLE_WOOD_STAIRS(78579, JUNGLE_STAIRS),
+    SUCRAFT_STRIPPED_ACACIA_WOOD_STAIRS(78580, ACACIA_STAIRS),
+    SUCRAFT_STRIPPED_DARK_OAK_WOOD_STAIRS(78581, DARK_OAK_STAIRS),
+    SUCRAFT_STRIPPED_WARPED_HYPHAE_STAIRS(78582, WARPED_STAIRS),
+    SUCRAFT_STRIPPED_CRIMSON_HYPHAE_STAIRS(78583, CRIMSON_STAIRS),
+    SUCRAFT_STRIPPED_MANGROVE_WOOD_STAIRS(78584, MANGROVE_STAIRS),
+    SUCRAFT_ANDESITE_PILLAR_STAIRS(78585, SUCRAFT_ANDESITE_BRICK_STAIRS),
+    SUCRAFT_CALCITE_PILLAR_STAIRS(78586, SUCRAFT_CALCITE_BRICK_STAIRS),
+    SUCRAFT_DIORITE_PILLAR_STAIRS(78587, SUCRAFT_DIORITE_BRICK_STAIRS),
+    SUCRAFT_DRIPSTONE_PILLAR_STAIRS(78588, SUCRAFT_DRIPSTONE_BRICK_STAIRS),
+    SUCRAFT_GRANITE_PILLAR_STAIRS(78589, SUCRAFT_GRANITE_BRICK_STAIRS),
+    SUCRAFT_TUFF_PILLAR_STAIRS(78590, SUCRAFT_TUFF_BRICK_STAIRS),
+    SUCRAFT_MANGROVE_BOOKSHELF(78591, SUCRAFT_SPRUCE_BOOKSHELF),
+    SUCRAFT_BONE_STAIRS(78592, SMOOTH_QUARTZ_STAIRS),
+    SUCRAFT_BASALT_STAIRS(78593, COBBLESTONE_STAIRS),
+    SUCRAFT_POLISHED_BASALT_STAIRS(78594, SUCRAFT_BASALT_STAIRS),
+    SUCRAFT_CUT_SANDSTONE_STAIRS(78595, SMOOTH_SANDSTONE_STAIRS),
+    SUCRAFT_CUT_RED_SANDSTONE_STAIRS(78596, SMOOTH_RED_SANDSTONE_STAIRS),
+    SUCRAFT_QUARTZ_PILLAR_STAIRS(78597, QUARTZ_STAIRS),
+    SUCRAFT_PURPUR_PILLAR_SLAB(78598, PURPUR_SLAB),
+    SUCRAFT_PURPUR_PILLAR_STAIRS(78599, PURPUR_STAIRS),
+    SUCRAFT_FLINT_SLAB(78600, DEEPSLATE_TILE_SLAB),
+    SUCRAFT_FLINT_STAIRS(78601, DEEPSLATE_TILE_STAIRS),
+    SUCRAFT_IRON_SLAB(78602, CUT_COPPER_SLAB),
+    SUCRAFT_GOLD_SLAB(78603, SUCRAFT_IRON_SLAB),
+    SUCRAFT_DIAMOND_SLAB(78604, SUCRAFT_IRON_SLAB),
+    SUCRAFT_EMERALD_SLAB(78605, SUCRAFT_IRON_SLAB),
+    SUCRAFT_NETHERITE_SLAB(78606, SUCRAFT_IRON_SLAB),
+    SUCRAFT_LAPIS_SLAB(78607, SUCRAFT_IRON_SLAB),
+    SUCRAFT_IRON_STAIRS(78608, CUT_COPPER_STAIRS),
+    SUCRAFT_GOLD_STAIRS(78609, SUCRAFT_IRON_STAIRS),
+    SUCRAFT_DIAMOND_STAIRS(78610, SUCRAFT_IRON_STAIRS),
+    SUCRAFT_EMERALD_STAIRS(78611, SUCRAFT_IRON_STAIRS),
+    SUCRAFT_NETHERITE_STAIRS(78612, SUCRAFT_IRON_STAIRS),
+    SUCRAFT_LAPIS_STAIRS(78613, SUCRAFT_IRON_STAIRS),
+    SUCRAFT_MOSS_SLAB(78614, SUCRAFT_DIRT_SLAB),
+    SUCRAFT_MOSS_STAIRS(78615, SUCRAFT_DIRT_STAIRS),
+    SUCRAFT_NETHER_WART_SLAB(78616, RED_NETHER_BRICK_SLAB),
+    SUCRAFT_NETHER_WART_STAIRS(78617, RED_NETHER_BRICK_STAIRS),
+    SUCRAFT_WARPED_WART_SLAB(78618, WARPED_SLAB),
+    SUCRAFT_WARPED_WART_STAIRS(78619, WARPED_STAIRS),
+    SUCRAFT_HAY_SLAB(78620, MUD_BRICK_SLAB),
+    SUCRAFT_HAY_STAIRS(78621, MUD_BRICK_STAIRS),
+    SUCRAFT_THATCH(78622, HAY_BLOCK),
+    SUCRAFT_THATCH_SLAB(78623, SUCRAFT_HAY_SLAB),
+    SUCRAFT_THATCH_STAIRS(78624, SUCRAFT_HAY_STAIRS),
+
+    // Suki end - custom blocks and items
+
     // ----- Legacy Separator -----
     @Deprecated
     LEGACY_AIR(0, 0),
@@ -4056,8 +4563,8 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
     @Deprecated
     LEGACY_RECORD_11(2266, 1),
     @Deprecated
-    LEGACY_RECORD_12(2267, 1),
-    ;
+    LEGACY_RECORD_12(2267, 1);
+
     //</editor-fold>
 
     @Deprecated
@@ -4073,6 +4580,10 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
     private final NamespacedKey key;
     private boolean isBlock; // Paper
 
+    // Suki start - custom blocks and items
+    private @Nullable Material vanillaTarget = null;
+    // Suki end - custom blocks and items
+
     private Material(final int id) {
         this(id, 64);
     }
@@ -4099,7 +4610,14 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
         this.maxStack = stack;
         this.data = data;
         this.legacy = this.name().startsWith(LEGACY_PREFIX);
-        this.key = NamespacedKey.minecraft(this.name().toLowerCase(Locale.ROOT));
+        // Suki start - custom blocks and items
+        String lowerCaseName = this.name().toLowerCase(Locale.ROOT);
+        if (this.name().startsWith("SUCRAFT_")) {
+            this.key = NamespacedKey.sucraft(lowerCaseName.substring(8));
+        } else {
+            this.key = NamespacedKey.minecraft(lowerCaseName);
+        }
+        // Suki end - custom blocks and items
         // try to cache the constructor for this material
         try {
             if (MaterialData.class.isAssignableFrom(data)) {
@@ -4114,6 +4632,13 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
         }
     }
 
+    // Suki start - custom blocks and items
+    Material(final int id, Material vanillaTarget) {
+        this(id);
+        this.vanillaTarget = vanillaTarget;
+    }
+    // Suki end - custom blocks and items
+
     // Paper start
 
     /**
@@ -4319,6 +4844,11 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
     }
     private boolean isBlock0() {
     // Paper end
+        // Suki start - custom blocks and items
+        if (vanillaTarget != null) {
+            return vanillaTarget.isBlock();
+        }
+        // Suki end - custom blocks and items
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="isBlock">
             case ACACIA_BUTTON:
@@ -5443,6 +5973,11 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
      * @return True if this material represents a playable music disk.
      */
     public boolean isRecord() {
+        // Suki start - custom blocks and items
+        if (vanillaTarget != null) {
+            return vanillaTarget.isRecord();
+        }
+        // Suki end - custom blocks and items
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="isRecord">
             case MUSIC_DISC_5:
@@ -5476,6 +6011,11 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
         if (!isBlock() || id == 0) {
             return false;
         }
+        // Suki start - custom blocks and items
+        if (vanillaTarget != null) {
+            return vanillaTarget.isSolid();
+        }
+        // Suki end - custom blocks and items
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="isSolid">
             case ACACIA_DOOR:
@@ -6411,6 +6951,11 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
      * @return True if this material is an air block.
      */
     public boolean isAir() {
+        // Suki start - custom blocks and items
+        if (vanillaTarget != null) {
+            return vanillaTarget.isAir();
+        }
+        // Suki end - custom blocks and items
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="isAir">
             case AIR:
@@ -6437,6 +6982,11 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
         if (!isBlock()) {
             return false;
         }
+        // Suki start - custom blocks and items
+        if (vanillaTarget != null) {
+            return vanillaTarget.isTransparent();
+        }
+        // Suki end - custom blocks and items
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="isTransparent">
             case ACACIA_BUTTON:
@@ -6633,6 +7183,11 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
         if (!isBlock()) {
             return false;
         }
+        // Suki start - custom blocks and items
+        if (vanillaTarget != null) {
+            return vanillaTarget.isFlammable();
+        }
+        // Suki end - custom blocks and items
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="isFlammable">
             case ACACIA_DOOR:
@@ -6931,6 +7486,11 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
         if (!isBlock()) {
             return false;
         }
+        // Suki start - custom blocks and items
+        if (vanillaTarget != null) {
+            return vanillaTarget.isBurnable();
+        }
+        // Suki end - custom blocks and items
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="isBurnable">
             case ACACIA_FENCE:
@@ -7135,6 +7695,11 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
      * @return true if this Material can be used as fuel.
      */
     public boolean isFuel() {
+        // Suki start - custom blocks and items
+        if (vanillaTarget != null) {
+            return vanillaTarget.isFuel();
+        }
+        // Suki end - custom blocks and items
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="isFuel">
             case ACACIA_BOAT:
@@ -7421,6 +7986,11 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
         if (!isBlock()) {
             return false;
         }
+        // Suki start - custom blocks and items
+        if (vanillaTarget != null) {
+            return vanillaTarget.isOccluding();
+        }
+        // Suki end - custom blocks and items
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="isOccluding">
             case ACACIA_LOG:
@@ -7880,6 +8450,11 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
         if (!isBlock()) {
             return false;
         }
+        // Suki start - custom blocks and items
+        if (vanillaTarget != null) {
+            return vanillaTarget.hasGravity();
+        }
+        // Suki end - custom blocks and items
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="hasGravity">
             case ANVIL:
@@ -7923,6 +8498,11 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
      * @return true if this material is an item
      */
     public boolean isItem() {
+        // Suki start - custom blocks and items
+        if (vanillaTarget != null) {
+            return vanillaTarget.isItem();
+        }
+        // Suki end - custom blocks and items
         switch (this) {
             //<editor-fold defaultstate="collapsed" desc="isItem">
             case ACACIA_WALL_SIGN:
@@ -8131,6 +8711,11 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
      * @return true if this material can be interacted with.
      */
     public boolean isInteractable() {
+        // Suki start - custom blocks and items
+        if (vanillaTarget != null) {
+            return vanillaTarget.isInteractable();
+        }
+        // Suki end - custom blocks and items
         switch (this) {
             // <editor-fold defaultstate="collapsed" desc="isInteractable">
             case ACACIA_BUTTON:
@@ -8427,6 +9012,11 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
      */
     public float getHardness() {
         Preconditions.checkArgument(isBlock(), "The Material is not a block!");
+        // Suki start - custom blocks and items
+        if (vanillaTarget != null) {
+            return vanillaTarget.getHardness();
+        }
+        // Suki end - custom blocks and items
         switch (this) {
             // <editor-fold defaultstate="collapsed" desc="getBlockHardness">
             case BARRIER:
@@ -9259,6 +9849,11 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
      */
     public float getBlastResistance() {
         Preconditions.checkArgument(isBlock(), "The Material is not a block!");
+        // Suki start - custom blocks and items
+        if (vanillaTarget != null) {
+            return vanillaTarget.getBlastResistance();
+        }
+        // Suki end - custom blocks and items
         switch (this) {
             // <editor-fold defaultstate="collapsed" desc="getBlastResistance">
             case BIG_DRIPLEAF:
@@ -10092,6 +10687,11 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
      */
     public float getSlipperiness() {
         Preconditions.checkArgument(isBlock(), "The Material is not a block!");
+        // Suki start - custom blocks and items
+        if (vanillaTarget != null) {
+            return vanillaTarget.getSlipperiness();
+        }
+        // Suki end - custom blocks and items
         switch (this) {
             // <editor-fold defaultstate="collapsed" desc="getSlipperiness">
             default:
@@ -10119,6 +10719,11 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
     @Nullable
     public Material getCraftingRemainingItem() {
         Preconditions.checkArgument(isItem(), "The Material is not an item!");
+        // Suki start - custom blocks and items
+        if (vanillaTarget != null) {
+            return vanillaTarget.getCraftingRemainingItem();
+        }
+        // Suki end - custom blocks and items
         switch (this) {
             // <editor-fold defaultstate="collapsed" desc="getCraftingRemainingItem">
             case WATER_BUCKET:
@@ -10144,6 +10749,11 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
     @NotNull
     public EquipmentSlot getEquipmentSlot() {
         Preconditions.checkArgument(isItem(), "The Material is not an item!");
+        // Suki start - custom blocks and items
+        if (vanillaTarget != null) {
+            return vanillaTarget.getEquipmentSlot();
+        }
+        // Suki end - custom blocks and items
         switch (this) {
             // <editor-fold defaultstate="collapsed" desc="getEquipmentSlot">
             case CARVED_PUMPKIN:
@@ -10207,7 +10817,11 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
     @NotNull
     public Multimap<Attribute, AttributeModifier> getDefaultAttributeModifiers(@NotNull EquipmentSlot slot) {
         Preconditions.checkArgument(isItem(), "The Material is not an item!");
-
+        // Suki start - custom blocks and items
+        if (vanillaTarget != null) {
+            return vanillaTarget.getDefaultAttributeModifiers(slot);
+        }
+        // Suki end - custom blocks and items
         return Bukkit.getUnsafe().getDefaultAttributeModifiers(this, slot);
     }
 
@@ -10218,6 +10832,11 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
      */
     @Nullable
     public CreativeCategory getCreativeCategory() {
+        // Suki start - custom blocks and items
+        if (vanillaTarget != null) {
+            return vanillaTarget.getCreativeCategory();
+        }
+        // Suki end - custom blocks and items
         return Bukkit.getUnsafe().getCreativeCategory(this);
     }
 
diff --git a/src/main/java/org/bukkit/NamespacedKey.java b/src/main/java/org/bukkit/NamespacedKey.java
index 236c9aea9ffc36269e5c32eacc9f1fd6bd039c88..5d56865ec4d3512df835d13ac6113851dae4afea 100644
--- a/src/main/java/org/bukkit/NamespacedKey.java
+++ b/src/main/java/org/bukkit/NamespacedKey.java
@@ -30,6 +30,9 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
      * compatibility measures.
      */
     public static final String BUKKIT = "bukkit";
+    // Suki start - custom blocks and items
+    public static final String SUCRAFT = "sucraft";
+    // Suki end - custom blocks and items
     //
     private static final Pattern VALID_NAMESPACE = Pattern.compile("[a-z0-9._-]+");
     private static final Pattern VALID_KEY = Pattern.compile("[a-z0-9/._-]+");
@@ -145,6 +148,15 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
         return new NamespacedKey(MINECRAFT, key);
     }
 
+    // Suki start - custom blocks and items
+
+    @NotNull
+    public static NamespacedKey sucraft(@NotNull String key) {
+        return new NamespacedKey(SUCRAFT, key);
+    }
+
+    // Suki end - custom blocks and items
+
     /**
      * Get a NamespacedKey from the supplied string with a default namespace if
      * a namespace is not defined. This is a utility method meant to fetch a
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 9a0af1b76191a49f9e00a645224bbcc73eda45c8..b3a25e44c746de2cb3d62cdd436534ab52707e7e 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -12,6 +12,7 @@ import java.util.Map;
 import java.util.Set;
 import java.util.UUID;
 import java.util.function.Consumer;
+import java.util.function.Predicate;
 import java.util.logging.Logger;
 import org.bukkit.Warning.WarningState;
 import org.bukkit.advancement.Advancement;
@@ -815,6 +816,12 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
     @Contract("null -> false")
     public boolean addRecipe(@Nullable Recipe recipe);
 
+    // Suki start - custom blocks and items
+
+    public boolean addRecipe(@Nullable Recipe recipe, boolean isSkippableForPlayersThatCannotAcceptLargePackets);
+
+    // Suki end - custom blocks and items
+
     /**
      * Get a list of all recipes for a given item. The stack size is ignored
      * in comparisons. If the durability is -1, it will match any data value.
@@ -2153,5 +2160,16 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @return the potion brewer
      */
     @NotNull org.bukkit.potion.PotionBrewer getPotionBrewer();
+
+    // Suki start - custom blocks and items
+
+    void addCanAcceptLargePacketsDisjunct(@NotNull Predicate<@NotNull Player> disjunct);
+
+    void addCanAcceptServerResourcePackDisjunct(@NotNull Predicate<@NotNull Player> disjunct);
+
+    void addCanAcceptNonMinecraftRecipesDisjunct(@NotNull Predicate<@NotNull Player> disjunct);
+
+    // Suki end - custom blocks and items
+
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/Tag.java b/src/main/java/org/bukkit/Tag.java
index 34fdab6ca0e0b4c1f70d9b849fcdc829f044166d..825caea1d4d29f22cf972019938d9fecdff80035 100644
--- a/src/main/java/org/bukkit/Tag.java
+++ b/src/main/java/org/bukkit/Tag.java
@@ -1,6 +1,8 @@
 package org.bukkit;
 
 import java.util.Set;
+
+import org.bukkit.block.Block;
 import org.bukkit.entity.EntityType;
 import org.jetbrains.annotations.NotNull;
 
@@ -23,19 +25,71 @@ public interface Tag<T extends Keyed> extends Keyed {
      * Key for the built in block registry.
      */
     String REGISTRY_BLOCKS = "blocks";
+    // Suki start - custom blocks
     /**
      * Vanilla block tag representing all colors of wool.
+     * <br>
+     * Modified to also include the following: derived stairs and slabs.
      */
     Tag<Material> WOOL = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wool"), Material.class);
+    /**
+     * Custom block tag representing the full blocks in {@link #WOOL}.
+     */
+    Tag<Material> WOOL_FULL_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.sucraft("wool_full_blocks"), Material.class);
+    /**
+     * Custom block tag representing the slabs in {@link #WOOL}.
+     */
+    Tag<Material> WOOL_SLABS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.sucraft("wool_slabs"), Material.class);
+    /**
+     * Custom block tag representing the stairs in {@link #WOOL}.
+     */
+    Tag<Material> WOOL_STAIRS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.sucraft("wool_stairs"), Material.class);
     /**
      * Vanilla block tag representing all plank variants.
+     * <br>
+     * Modified to also include the following: all colors of dyed planks, and derived stairs and slabs.
      */
     Tag<Material> PLANKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("planks"), Material.class);
+    /**
+     * Custom block tag representing the full blocks in {@link #PLANKS}.
+     */
+    Tag<Material> PLANK_FULL_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.sucraft("plank_full_blocks"), Material.class);
+    /**
+     * Custom block tag representing the slabs in {@link #PLANKS}.
+     */
+    Tag<Material> PLANK_SLABS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.sucraft("plank_slabs"), Material.class);
+    /**
+     * Custom block tag representing the stairs in {@link #PLANKS}.
+     */
+    Tag<Material> PLANK_STAIRS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.sucraft("plank_stairs"), Material.class);
+    /**
+     * Custom block tag exactly representing the blocks normally represented by {@link #PLANKS} in vanilla.
+     */
+    Tag<Material> VANILLA_PLANKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.sucraft("vanilla_planks"), Material.class);
     /**
      * Vanilla block tag representing all regular/mossy/cracked/chiseled stone
      * bricks.
+     * <br>
+     * Modified to also include the following: snowy and dirty stone bricks, and derived stairs and slabs.
      */
     Tag<Material> STONE_BRICKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("stone_bricks"), Material.class);
+    /**
+     * Custom block tag representing the full blocks in {@link #STONE_BRICKS}.
+     */
+    Tag<Material> STONE_BRICK_FULL_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.sucraft("stone_brick_full_blocks"), Material.class);
+    /**
+     * Custom block tag representing the slabs in {@link #STONE_BRICKS}.
+     */
+    Tag<Material> STONE_BRICK_SLABS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.sucraft("stone_brick_slabs"), Material.class);
+    /**
+     * Custom block tag representing the stairs in {@link #STONE_BRICKS}.
+     */
+    Tag<Material> STONE_BRICK_STAIRS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.sucraft("stone_brick_stairs"), Material.class);
+    /**
+     * Custom block tag exactly representing the blocks normally represented by {@link #STONE_BRICKS} in vanilla.
+     */
+    Tag<Material> VANILLA_STONE_BRICKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.sucraft("vanilla_stone_bricks"), Material.class);
+    // Suki end - custom blocks
     /**
      * Vanilla block tag representing all wooden buttons.
      */
@@ -58,14 +112,28 @@ public interface Tag<T extends Keyed> extends Keyed {
      * Vanilla block tag representing all wooden doors.
      */
     Tag<Material> WOODEN_DOORS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wooden_doors"), Material.class);
+    // Suki start - custom blocks
     /**
      * Vanilla block tag representing all wooden stairs.
+     * <br>
+     * Modified to also include the following: all colors of dyed plank stairs.
      */
     Tag<Material> WOODEN_STAIRS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wooden_stairs"), Material.class);
+    /**
+     * Custom block tag exactly representing the blocks normally represented by {@link #WOODEN_STAIRS} in vanilla.
+     */
+    Tag<Material> VANILLA_WOODEN_STAIRS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.sucraft("vanilla_wooden_stairs"), Material.class);
     /**
      * Vanilla block tag representing all wooden slabs.
+     * <br>
+     * Modified to also include the following: all colors of dyed plank slabs.
      */
     Tag<Material> WOODEN_SLABS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wooden_slabs"), Material.class);
+    /**
+     * Custom block tag exactly representing the blocks normally represented by {@link #WOODEN_SLABS} in vanilla.
+     */
+    Tag<Material> VANILLA_WOODEN_SLABS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.sucraft("vanilla_wooden_slabs"), Material.class);
+    // Suki end - custom blocks
     /**
      * Vanilla block tag representing all wooden fences.
      */
@@ -95,55 +163,81 @@ public interface Tag<T extends Keyed> extends Keyed {
      * Vanilla block tag representing all sapling variants.
      */
     Tag<Material> SAPLINGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("saplings"), Material.class);
+    // Suki start - custom blocks and items
     /**
      * Vanilla block tag representing all log and bark variants that burn.
+     * <br>
+     * Modified to also include the following: derived stairs and slabs.
      */
     Tag<Material> LOGS_THAT_BURN = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("logs_that_burn"), Material.class);
     /**
      * Vanilla block tag representing all log bark variants that appear
      * naturally in the overworld.
+     * <br>
+     * Modified to also include the following: derived stairs and slabs.
      */
     Tag<Material> OVERWORLD_NATURAL_LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("overworld_natural_logs"), Material.class);
     /**
      * Vanilla block tag representing all log and bark variants.
+     * <br>
+     * Modified to also include the following: derived stairs and slabs.
      */
     Tag<Material> LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("logs"), Material.class);
     /**
      * Vanilla block tag representing all dark oak log and bark variants.
+     * <br>
+     * Modified to also include the following: derived stairs and slabs.
      */
     Tag<Material> DARK_OAK_LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("dark_oak_logs"), Material.class);
     /**
      * Vanilla block tag representing all oak log and bark variants.
+     * <br>
+     * Modified to also include the following: derived stairs and slabs.
      */
     Tag<Material> OAK_LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("oak_logs"), Material.class);
     /**
      * Vanilla block tag representing all birch log and bark variants.
+     * <br>
+     * Modified to also include the following: derived stairs and slabs.
      */
     Tag<Material> BIRCH_LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("birch_logs"), Material.class);
     /**
      * Vanilla block tag representing all acacia log and bark variants.
+     * <br>
+     * Modified to also include the following: derived stairs and slabs.
      */
     Tag<Material> ACACIA_LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("acacia_logs"), Material.class);
     /**
      * Vanilla block tag representing all jungle log and bark variants.
+     * <br>
+     * Modified to also include the following: derived stairs and slabs.
      */
     Tag<Material> JUNGLE_LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("jungle_logs"), Material.class);
     /**
      * Vanilla block tag representing all spruce log and bark variants.
+     * <br>
+     * Modified to also include the following: derived stairs and slabs.
      */
     Tag<Material> SPRUCE_LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("spruce_logs"), Material.class);
     /**
      * Vanilla block tag representing all mangrove log and bark variants.
+     * <br>
+     * Modified to also include the following: derived stairs and slabs.
      */
     Tag<Material> MANGROVE_LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mangrove_logs"), Material.class);
     /**
      * Vanilla block tag representing all crimson stems.
+     * <br>
+     * Modified to also include the following: derived stairs and slabs.
      */
     Tag<Material> CRIMSON_STEMS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("crimson_stems"), Material.class);
     /**
      * Vanilla block tag representing all warped stems.
+     * <br>
+     * Modified to also include the following: derived stairs and slabs.
      */
     Tag<Material> WARPED_STEMS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("warped_stems"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Vanilla block tag representing all banner blocks.
      */
@@ -174,8 +268,16 @@ public interface Tag<T extends Keyed> extends Keyed {
     Tag<Material> RAILS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("rails"), Material.class);
     /**
      * Vanilla block tag representing all leaves fans.
+     * <br>
+     * Modified to also include the following: custom leaves.
      */
     Tag<Material> LEAVES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("leaves"), Material.class);
+    // Suki start - custom blocks and items
+    /**
+     * Custom block tag exactly representing the blocks normally represented by {@link #LEAVES} in vanilla.
+     */
+    Tag<Material> VANILLA_LEAVES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.sucraft("vanilla_leaves"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Vanilla block tag representing all trapdoors (inherits from
      * {@link #WOODEN_TRAPDOORS}.
@@ -249,23 +351,49 @@ public interface Tag<T extends Keyed> extends Keyed {
      * Vanilla block tag representing all candles.
      */
     Tag<Material> CANDLES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("candles"), Material.class);
+    // Suki start - custom blocks and items
     /**
      * Vanilla block tag representing all dirt.
+     * <br>
+     * Modified to also include the following: dirt bricks, and derived stairs and slabs.
      */
     Tag<Material> DIRT = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("dirt"), Material.class);
+    /**
+     * Custom block tag exactly representing the blocks normally represented by {@link #DIRT} in vanilla.
+     */
+    Tag<Material> VANILLA_DIRT = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.sucraft("vanilla_dirt"), Material.class);
     /**
      * Vanilla block tag representing all terracotta.
+     * <br>
+     * Modified to also include the following: derived stairs and slabs.
      */
     Tag<Material> TERRACOTTA = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("terracotta"), Material.class);
+    /**
+     * Custom block tag representing the full blocks in {@link #TERRACOTTA}.
+     */
+    Tag<Material> TERRACOTTA_FULL_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.sucraft("terracotta_full_blocks"), Material.class);
+    /**
+     * Custom block tag representing the slabs in {@link #TERRACOTTA}.
+     */
+    Tag<Material> TERRACOTTA_SLABS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.sucraft("terracotta_slabs"), Material.class);
+    /**
+     * Custom block tag representing the stairs in {@link #TERRACOTTA}.
+     */
+    Tag<Material> TERRACOTTA_STAIRS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.sucraft("terracotta_stairs"), Material.class);
     /**
      * Vanilla block tag representing all blocks which complete the find tree
      * tutorial.
+     * <br>
+     * Modified to also include the following: custom additions to {@link #LOGS}, {@link #LEAVES} and {@link #WART_BLOCKS}.
      */
     Tag<Material> COMPLETES_FIND_TREE_TUTORIAL = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("completes_find_tree_tutorial"), Material.class);
     /**
      * Vanilla block tag denoting blocks that enderman may pick up and hold.
+     * <br>
+     * Modified to also include the following: custom additions to {@link #DIRT}.
      */
     Tag<Material> ENDERMAN_HOLDABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("enderman_holdable"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Vanilla block tag denoting ice blocks.
      */
@@ -298,10 +426,14 @@ public interface Tag<T extends Keyed> extends Keyed {
      * Vanilla block tag representing all coral.
      */
     Tag<Material> CORALS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("corals"), Material.class);
+    // Suki start - custom blocks and items
     /**
      * Vanilla block tag denoting all blocks bamboo may be planted on.
+     * <br>
+     * Modified to also include the following: stairs and slabs derived from gravel, and custom additions to {@link #SAND} and {@link #DIRT}.
      */
     Tag<Material> BAMBOO_PLANTABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("bamboo_plantable_on"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Vanilla block tag representing all standing signs.
      */
@@ -314,23 +446,33 @@ public interface Tag<T extends Keyed> extends Keyed {
      * Vanilla block tag representing all signs.
      */
     Tag<Material> SIGNS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("signs"), Material.class);
+    // Suki start - custom blocks and items
     /**
      * Vanilla block tag representing all blocks immune to dragons.
+     * <br>
+     * Modified to also include the following: stairs and slabs derived from obsidian and crying obsidian.
      */
     Tag<Material> DRAGON_IMMUNE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("dragon_immune"), Material.class);
     /**
      * Vanilla block tag representing all blocks transparent to the ender
      * dragon.
+     * <br>
+     * Modified to also include the following: custom additions to {@link #FIRE}.
      */
     Tag<Material> DRAGON_TRANSPARENT = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("dragon_transparent"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Vanilla block tag representing all blocks immune to withers.
      */
     Tag<Material> WITHER_IMMUNE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wither_immune"), Material.class);
+    // Suki start - custom blocks and items
     /**
      * Vanilla block tag representing all base blocks used for wither summoning.
+     * <br>
+     * Modified to also include the following: stairs derived from soul sand or soul soil.
      */
     Tag<Material> WITHER_SUMMON_BASE_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wither_summon_base_blocks"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Vanilla block tag representing all beehives.
      */
@@ -347,27 +489,39 @@ public interface Tag<T extends Keyed> extends Keyed {
      * Vanilla block tag representing all portals.
      */
     Tag<Material> PORTALS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("portals"), Material.class);
+    // Suki start - custom blocks and items
     /**
      * Vanilla block tag representing all fire blocks.
+     * <br>
+     * Modified to also include the following: colored fire.
      */
     Tag<Material> FIRE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("fire"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Vanilla block tag representing all nylium blocks.
      */
     Tag<Material> NYLIUM = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("nylium"), Material.class);
+    // Suki start - custom blocks and items
     /**
      * Vanilla block tag representing all wart blocks.
+     * <br>
+     * Modified to also include the following: derived stairs and slabs.
      */
     Tag<Material> WART_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wart_blocks"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Vanilla block tag representing all beacon base blocks.
      */
     Tag<Material> BEACON_BASE_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("beacon_base_blocks"), Material.class);
+    // Suki start - custom blocks and items
     /**
      * Vanilla block tag representing all blocks affected by the soul speed
      * enchantment.
+     * <br>
+     * Modified to also include the following: soul sandstone blocks, and derived stairs and slabs.
      */
     Tag<Material> SOUL_SPEED_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("soul_speed_blocks"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Vanilla block tag representing all wall post overrides.
      */
@@ -388,10 +542,14 @@ public interface Tag<T extends Keyed> extends Keyed {
      * Vanilla block tag representing all hoglin repellents.
      */
     Tag<Material> HOGLIN_REPELLENTS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("hoglin_repellents"), Material.class);
+    // Suki start - custom blocks and items
     /**
      * Vanilla block tag representing all soul fire base blocks.
+     * <br>
+     * Modified to also include the following: soul sandstone blocks, and derived stairs and slabs.
      */
     Tag<Material> SOUL_FIRE_BASE_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("soul_fire_base_blocks"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Vanilla block tag representing all warm strider blocks.
      */
@@ -400,10 +558,14 @@ public interface Tag<T extends Keyed> extends Keyed {
      * Vanilla block tag representing all campfires.
      */
     Tag<Material> CAMPFIRES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("campfires"), Material.class);
+    // Suki start - custom blocks and items
     /**
      * Vanilla block tag representing all blocks guarded by piglins.
+     * <br>
+     * Modified to also include the following: stairs and slabs derived from blocks of gold, blocks of raw gold and gilded blackstone.
      */
     Tag<Material> GUARDED_BY_PIGLINS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("guarded_by_piglins"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Vanilla block tag representing all blocks that prevent inside mob
      * spawning.
@@ -418,21 +580,28 @@ public interface Tag<T extends Keyed> extends Keyed {
      */
     Tag<Material> UNSTABLE_BOTTOM_CENTER = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("unstable_bottom_center"), Material.class);
     Tag<Material> MUSHROOM_GROW_BLOCK = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mushroom_grow_block"), Material.class);
-
+    // Suki start - custom blocks and items
     /**
      * Vanilla block tag representing all blocks that burn forever in the
      * overworld.
+     * <br>
+     * Modified to also include the following: stairs and slabs derived from netherrack.
      */
     Tag<Material> INFINIBURN_OVERWORLD = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("infiniburn_overworld"), Material.class);
     /**
      * Vanilla block tag representing all blocks that burn forever in the
      * nether.
+     * <br>
+     * Modified to also include the following: stairs and slabs derived from netherrack.
      */
     Tag<Material> INFINIBURN_NETHER = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("infiniburn_nether"), Material.class);
     /**
      * Vanilla block tag representing all blocks that burn forever in the end.
+     * <br>
+     * Modified to also include the following: stairs and slabs derived from netherrack.
      */
     Tag<Material> INFINIBURN_END = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("infiniburn_end"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Vanilla block tag representing the overworld base material.
      */
@@ -468,23 +637,33 @@ public interface Tag<T extends Keyed> extends Keyed {
      * Vanilla block tag representing all cauldrons.
      */
     Tag<Material> CAULDRONS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("cauldrons"), Material.class);
+    // Suki start - custom blocks and items
     /**
      * Vanilla block tag representing all blocks that make cryustal sounds.
+     * <br>
+     * Modified to also include the following: stairs and slabs derived from blocks of amethyst.
      */
     Tag<Material> CRYSTAL_SOUND_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("crystal_sound_blocks"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Vanilla block tag representing all blocks that play muffled step sounds.
      */
     Tag<Material> INSIDE_STEP_SOUND_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("inside_step_sound_blocks"), Material.class);
+    // Suki start - custom blocks and items
     /**
      * Vanilla block tag representing all blocks that block vibration signals.
+     * <br>
+     * Modified to also include the following: stairs and slabs derived from wool.
      */
     Tag<Material> OCCLUDES_VIBRATION_SIGNALS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("occludes_vibration_signals"), Material.class);
     /**
      * Vanilla block tag representing all blocks that dampen the propagation of
      * vibration signals.
+     * <br>
+     * Modified to also include the following: stairs and slabs derived from wool.
      */
     Tag<Material> DAMPENS_VIBRATIONS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("dampens_vibrations"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Vanilla block tag representing all blocks that are replaceable by
      * dripstone.
@@ -494,48 +673,70 @@ public interface Tag<T extends Keyed> extends Keyed {
      * Vanilla block tag representing all cave vines.
      */
     Tag<Material> CAVE_VINES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("cave_vines"), Material.class);
+    // Suki start - custom blocks and items
     /**
      * Vanilla block tag representing all blocks replaceable by moss.
+     * <br>
+     * Modified to also include the following: custom additions to {@link #DIRT}.
      */
     Tag<Material> MOSS_REPLACEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("moss_replaceable"), Material.class);
     /**
      * Vanilla block tag representing all blocks replaceable by lush ground.
+     * <br>
+     * Modified to also include the following: custom additions to {@link #DIRT}.
      */
     Tag<Material> LUSH_GROUND_REPLACEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("lush_ground_replaceable"), Material.class);
     /**
      * Vanilla block tag representing all blocks replaceable by azalea root.
+     * <br>
+     * Modified to also include the following: custom additions to {@link #DIRT} and {@link #TERRACOTTA}.
      */
     Tag<Material> AZALEA_ROOT_REPLACEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("azalea_root_replaceable"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Vanilla block tag representing all blocks which small dripleaf can be
      * placed on.
      */
     Tag<Material> SMALL_DRIPLEAF_PLACEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("small_dripleaf_placeable"), Material.class);
+    // Suki start - custom blocks and items
     /**
      * Vanilla block tag representing all blocks which big dripleaf can be
      * placed on.
+     * <br>
+     * Modified to also include the following: custom additions to {@link #DIRT}.
      */
     Tag<Material> BIG_DRIPLEAF_PLACEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("big_dripleaf_placeable"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Vanilla block tag representing all snow blocks.
      */
     Tag<Material> SNOW = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("snow"), Material.class);
+    // Suki start - custom blocks and items
     /**
      * Vanilla block tag representing all blocks mineable with an axe.
+     * <br>
+     * Modified to also include all custom blocks that are intended to be mineable with an axe, as well as player-observable versions (either with or without the resource pack) of these blocks.
      */
     Tag<Material> MINEABLE_AXE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mineable/axe"), Material.class);
     /**
      * Vanilla block tag representing all blocks mineable with a hoe.
+     * <br>
+     * Modified to also include all custom blocks that are intended to be mineable with a hoe, as well as player-observable versions (either with or without the resource pack) of these blocks.
      */
     Tag<Material> MINEABLE_HOE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mineable/hoe"), Material.class);
     /**
      * Vanilla block tag representing all blocks mineable with a pickaxe.
+     * <br>
+     * Modified to also include all custom blocks that are intended to be mineable with a pickaxe, as well as player-observable versions (either with or without the resource pack) of these blocks.
      */
     Tag<Material> MINEABLE_PICKAXE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mineable/pickaxe"), Material.class);
     /**
      * Vanilla block tag representing all blocks mineable with a shovel.
+     * <br>
+     * Modified to also include all custom blocks that are intended to be mineable with a shovel, as well as player-observable versions (either with or without the resource pack) of these blocks.
      */
     Tag<Material> MINEABLE_SHOVEL = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mineable/shovel"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Vanilla block tag representing all blocks which require a diamond tool.
      */
@@ -553,11 +754,15 @@ public interface Tag<T extends Keyed> extends Keyed {
      * world generation features.
      */
     Tag<Material> FEATURES_CANNOT_REPLACE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("features_cannot_replace"), Material.class);
+    // Suki start - custom blocks and items
     /**
      * Vanilla block tag representing all blocks which lava pools will not
      * replace.
+     * <br>
+     * Modified to also include the following: custom additions to {@link #LOGS} and {@link #LEAVES}.
      */
     Tag<Material> LAVA_POOL_STONE_CANNOT_REPLACE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("lava_pool_stone_cannot_replace"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Vanilla block tag representing all blocks which geodes will not spawn in.
      */
@@ -566,10 +771,14 @@ public interface Tag<T extends Keyed> extends Keyed {
      * Vanilla block tag representing all blocks which frogs prefer to jump to.
      */
     Tag<Material> FROG_PREFER_JUMP_TO = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("frog_prefer_jump_to"), Material.class);
+    // Suki start - custom blocks and items
     /**
      * Vanilla block tag representing all blocks which can be replaced by skulk.
+     * <br>
+     * Modified to also include the following: custom additions to {@link #DIRT} and {@link #TERRACOTTA}.
      */
     Tag<Material> SCULK_REPLACEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("sculk_replaceable"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Vanilla block tag representing all blocks which can be replaced by skulk
      * during world generation.
@@ -596,10 +805,14 @@ public interface Tag<T extends Keyed> extends Keyed {
      * Vanilla block tag representing all blocks which mooshrooms will spawn on.
      */
     Tag<Material> MOOSHROOMS_SPAWNABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mooshrooms_spawnable_on"), Material.class);
+    // Suki start - custom blocks and items
     /**
      * Vanilla block tag representing all blocks which parrots will spawn on.
+     * <br>
+     * Modified to also include the following: custom additions to {@link #LOGS} and {@link #LEAVES}.
      */
     Tag<Material> PARROTS_SPAWNABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("parrots_spawnable_on"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Vanilla block tag representing all blocks which polar bears will spawn
      * on.
@@ -626,10 +839,14 @@ public interface Tag<T extends Keyed> extends Keyed {
      * Vanilla block tag representing all blocks which frogs will spawn on.
      */
     Tag<Material> FROGS_SPAWNABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("frogs_spawnable_on"), Material.class);
+    // Suki start - custom blocks and items
     /**
      * Vanilla block tag representing all blocks which azaleas will grow on.
+     * <br>
+     * Modified to also include the following: custom additions to {@link #DIRT}, {@link #SAND} and {@link #TERRACOTTA}.
      */
     Tag<Material> AZALEA_GROWS_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("azalea_grows_on"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Vanilla block tag representing all plant blocks which may be replaced.
      */
@@ -648,15 +865,21 @@ public interface Tag<T extends Keyed> extends Keyed {
      * through.
      */
     Tag<Material> MANGROVE_ROOTS_CAN_GROW_THROUGH = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mangrove_roots_can_grow_through"), Material.class);
+    // Suki start - custom blocks and items
     /**
      * Vanilla block tag representing all blocks which dead bushes may be placed
      * on.
+     * <br>
+     * Modified to also include the following: custom additions to {@link #DIRT}, {@link #SAND} and {@link #TERRACOTTA}.
      */
     Tag<Material> DEAD_BUSH_MAY_PLACE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("dead_bush_may_place_on"), Material.class);
     /**
      * Vanilla block tag representing all blocks which snap dropped goat horns.
+     * <br>
+     * Modified to also include a lot of derived and similar blocks.
      */
     Tag<Material> SNAPS_GOAT_HORN = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("snaps_goat_horn"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Vanilla block tag representing blocks which snow cannot survive on.
      */
@@ -665,6 +888,24 @@ public interface Tag<T extends Keyed> extends Keyed {
      * Vanilla block tag representing blocks which snow can survive on.
      */
     Tag<Material> SNOW_LAYER_CAN_SURVIVE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("snow_layer_can_survive_on"), Material.class);
+    // Suki start - custom blocks and items
+    /**
+     * Custom block tag representing dyed planks.
+     */
+    Tag<Material> DYED_PLANKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.sucraft("dyed_planks"), Material.class);
+    /**
+     * Custom block tag representing the full blocks in {@link #DYED_PLANKS}.
+     */
+    Tag<Material> DYED_PLANK_FULL_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.sucraft("dyed_plank_full_blocks"), Material.class);
+    /**
+     * Custom block tag representing the slabs in {@link #DYED_PLANKS}.
+     */
+    Tag<Material> DYED_PLANK_FULL_SLABS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.sucraft("dyed_plank_slabs"), Material.class);
+    /**
+     * Custom block tag representing the stairs in {@link #DYED_PLANKS}.
+     */
+    Tag<Material> DYED_PLANK_FULL_STAIRS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.sucraft("dyed_plank_stairs"), Material.class);
+    // Suki end - custom blocks and items
     /**
      * Key for the built in item registry.
      */
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 790b68f4f87968182fae03bcfab78e5814ff421f..b63b09feec836f9cc96156bf359381eeba6e3b6c 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -2509,6 +2509,20 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     boolean hasResourcePack();
 
+    // Suki start - custom blocks and items
+
+    public boolean hasSuCraftResourcePack();
+
+    public boolean hasHighPingForCustomBlocks();
+
+    public boolean canAcceptLargePackets();
+
+    public boolean canAcceptServerResourcePack();
+
+    public boolean canAcceptNonMinecraftRecipes();
+
+    // Suki end - custom blocks and items
+
     /**
      * Gets a copy of this players profile
      * @return The players profile object
diff --git a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
index c6b0fd783675cd019048e445d8e959637d90be7a..6bffdf48b852744c953e2c6a79b3897c0da2b8fe 100644
--- a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
@@ -581,4 +581,17 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      */
     boolean hasDestroyableKeys();
     // Paper end
+
+    // Suki start - custom blocks and items
+
+    boolean getAddTechnicalPropertiesLore();
+
+    void setAddTechnicalPropertiesLore(boolean add);
+
+    boolean getAddUnderlyingItemLoreIfRenamed();
+
+    void setAddUnderlyingItemLoreIfRenamed(boolean add);
+
+    // Suki end - custom blocks and items
+
 }
