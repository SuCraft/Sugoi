From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Tue, 21 Jun 2022 12:46:55 +0200
Subject: [PATCH] Deobfuscation helpers


diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index 98664c95331cee4139711c402dfaf406ee672c22..f4facc69499a93bf09903df1cb76365a35dc7275 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -510,6 +510,14 @@ public class Commands {
         return this.dispatcher;
     }
 
+    // Suki start - OBFHELPER
+
+    public com.mojang.brigadier.CommandDispatcher<CommandSourceStack> _getDispatcher() {
+        return this.getDispatcher();
+    }
+
+    // Suki end - OBFHELPER
+
     @Nullable
     public static <S> CommandSyntaxException getParseException(ParseResults<S> parse) {
         return !parse.getReader().canRead() ? null : (parse.getExceptions().size() == 1 ? (CommandSyntaxException) parse.getExceptions().values().iterator().next() : (parse.getContext().getRange().isEmpty() ? CommandSyntaxException.BUILT_IN_EXCEPTIONS.dispatcherUnknownCommand().createWithContext(parse.getReader()) : CommandSyntaxException.BUILT_IN_EXCEPTIONS.dispatcherUnknownArgument().createWithContext(parse.getReader())));
diff --git a/src/main/java/net/minecraft/nbt/Tag.java b/src/main/java/net/minecraft/nbt/Tag.java
index 2452fb49ebe5ec791cc7151e3b73b5c572ff2eda..985e9d3507f346817f99f925b1c1a6d09662acf1 100644
--- a/src/main/java/net/minecraft/nbt/Tag.java
+++ b/src/main/java/net/minecraft/nbt/Tag.java
@@ -39,6 +39,14 @@ public interface Tag {
         return (new StringTagVisitor()).visit(this);
     }
 
+    // Suki start - OBFHELPER
+
+    default String _getAsString() {
+        return this.getAsString();
+    }
+
+    // Suki end - OBFHELPER
+
     void accept(TagVisitor visitor);
 
     StreamTagVisitor.ValueResult accept(StreamTagVisitor visitor);
diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index b4210fc803030b850b999afcac2e50c0dd7e2723..507d12cb9b70dbbef2ce95070495f791fbe4206d 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -99,6 +99,11 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     private final PacketFlow receiving;
     private final Queue<Connection.PacketHolder> queue = Queues.newConcurrentLinkedQueue();
     public Channel channel;
+    // Suki start - OBFHELPER
+    public Channel _channel() {
+        return this.channel;
+    }
+    // Suki end - OBFHELPER
     public SocketAddress address;
     // Spigot Start
     public java.util.UUID spoofedUUID;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundGameEventPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundGameEventPacket.java
index 7a225421d54f9b30f0c62036888e09379ee28bd2..d855192e9c757b78279c0360c31905af526e2123 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundGameEventPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundGameEventPacket.java
@@ -10,6 +10,11 @@ public class ClientboundGameEventPacket implements Packet<ClientGamePacketListen
     public static final ClientboundGameEventPacket.Type START_RAINING = new ClientboundGameEventPacket.Type(1);
     public static final ClientboundGameEventPacket.Type STOP_RAINING = new ClientboundGameEventPacket.Type(2);
     public static final ClientboundGameEventPacket.Type CHANGE_GAME_MODE = new ClientboundGameEventPacket.Type(3);
+    // Suki start - OBFHELPER
+    public static ClientboundGameEventPacket.Type _CHANGE_GAME_MODE() {
+        return ClientboundGameEventPacket.CHANGE_GAME_MODE;
+    }
+    // Suki end - OBFHELPER
     public static final ClientboundGameEventPacket.Type WIN_GAME = new ClientboundGameEventPacket.Type(4);
     public static final ClientboundGameEventPacket.Type DEMO_EVENT = new ClientboundGameEventPacket.Type(5);
     public static final ClientboundGameEventPacket.Type ARROW_HIT_PLAYER = new ClientboundGameEventPacket.Type(6);
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java b/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java
index db0b69f227ab388fa1335471313200f072cca2f3..f5587027d3a43b93866bf673f84c4e2b39af8dc6 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java
@@ -140,6 +140,14 @@ public class DedicatedPlayerList extends PlayerList {
         return (DedicatedServer)super.getServer();
     }
 
+    // Suki start - OBFHELPER
+
+    public DedicatedServer _getServer() {
+        return this.getServer();
+    }
+
+    // Suki end - OBFHELPER
+
     @Override
     public boolean canBypassPlayerLimit(GameProfile profile) {
         return this.getOps().canBypassPlayerLimit(profile);
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index a825c3a206ad53241887aff5bc398f3f41fd20f0..dce80a309633a0e6dbc42f251246f74b083ce600 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -173,6 +173,13 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     // Martijn start- per-player view distance
     // This value is the intended world send view distance + 1
     private int vanillaWorldViewDistancePlusOne;
+    // Suki start - OBFHELPER
+    // This isn't actually obfuscated but we normally would want it to be private,
+    // but this opens the value up for plugins to use more readily when this is really the value that is needed
+    public int _vanillaWorldViewDistancePlusOne() {
+        return this.vanillaWorldViewDistancePlusOne;
+    }
+    // Suki end - OBFHELPER
     // Suki end - per-player view distance
     public final com.destroystokyo.paper.util.misc.PlayerAreaMap playerMobDistanceMap; // Paper
     public final ReferenceOpenHashSet<ChunkHolder> needsChangeBroadcasting = new ReferenceOpenHashSet<>();
diff --git a/src/main/java/net/minecraft/server/level/DistanceManager.java b/src/main/java/net/minecraft/server/level/DistanceManager.java
index b8760409a1f88a74a8ea1787d6bf0a23b879bd5d..2cd84de2428e67928f105811118bea603d69785d 100644
--- a/src/main/java/net/minecraft/server/level/DistanceManager.java
+++ b/src/main/java/net/minecraft/server/level/DistanceManager.java
@@ -70,6 +70,11 @@ public abstract class DistanceManager {
     final Executor mainThreadExecutor;
     private long ticketTickCounter;
     private int simulationDistance = 10;
+    // Suki start - OBFHELPER
+    public int _simulationDistance() {
+        return this.simulationDistance;
+    }
+    // Suki end - OBFHELPER
     private final ChunkMap chunkMap; // Paper
 
     protected DistanceManager(Executor workerExecutor, Executor mainThreadExecutor, ChunkMap chunkMap) {
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 5f1f6e8bd7e7ec02803f14a0fc7f88d0c8d5fa9c..0c4e8372f79850eeac8f162601c0c01f16b4d668 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -54,11 +54,21 @@ public class ServerChunkCache extends ChunkSource {
     public static final org.slf4j.Logger LOGGER = com.mojang.logging.LogUtils.getLogger(); // Paper
     public static final List<ChunkStatus> CHUNK_STATUSES = ChunkStatus.getStatusList();
     private final DistanceManager distanceManager;
+    // Suki start - OBFHELPER
+    public DistanceManager _distanceManager() {
+        return this.distanceManager;
+    }
+    // Suki end - OBFHELPER
     final ServerLevel level;
     public final Thread mainThread;
     final ThreadedLevelLightEngine lightEngine;
     public final ServerChunkCache.MainThreadExecutor mainThreadProcessor;
     public final ChunkMap chunkMap;
+    // Suki start - OBFHELPER
+    public ChunkMap _chunkMap() {
+        return this.chunkMap;
+    }
+    // Suki end - OBFHELPER
     private final DimensionDataStorage dataStorage;
     private long lastInhabitedUpdate;
     public boolean spawnEnemies = true;
@@ -1044,6 +1054,14 @@ public class ServerChunkCache extends ChunkSource {
         this.distanceManager.updateSimulationDistance(simulationDistance);
     }
 
+    // Suki start - OBFHELPER
+
+    public void _setSimulationDistance(int simulationDistance) {
+        this.setSimulationDistance(simulationDistance);
+    }
+
+    // Suki end - OBFHELPER
+
     @Override
     public void setSpawnSettings(boolean spawnMonsters, boolean spawnAnimals) {
         this.spawnEnemies = spawnMonsters;
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index e85b95fe0339dcc3f6a542984f0ac398b14f7173..cd1c2376800248103c06f1509347a254797a4444 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -49,6 +49,7 @@ import net.minecraft.core.Registry;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.SectionPos;
 import net.minecraft.core.particles.ParticleOptions;
+import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.protocol.Packet;
@@ -188,6 +189,11 @@ public class ServerLevel extends Level implements WorldGenLevel {
     private static final int MAX_SCHEDULED_TICKS_PER_TICK = 65536;
     public final List<ServerPlayer> players;
     public final ServerChunkCache chunkSource;
+    // Suki start - OBFHELPER
+    public ServerChunkCache _chunkSource() {
+        return this.chunkSource;
+    }
+    // Suki end - OBFHELPER
     private final MinecraftServer server;
     public final PrimaryLevelData serverLevelData; // CraftBukkit - type
     final EntityTickList entityTickList;
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index eee1df24a7c0cb65b11e804824460b18a3053789..a53d974d3982e62d83e6fc043232c83aaa2d203e 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -463,6 +463,11 @@ public class ServerPlayer extends Player {
     private static final int NEUTRAL_MOB_DEATH_NOTIFICATION_RADII_XZ = 32;
     private static final int NEUTRAL_MOB_DEATH_NOTIFICATION_RADII_Y = 10;
     public ServerGamePacketListenerImpl connection;
+    // Suki start - OBFHELPER
+    public ServerGamePacketListenerImpl _connection() {
+        return this.connection;
+    }
+    // Suki end - OBFHELPER
     public net.minecraft.network.Connection networkManager; // Paper
     public final MinecraftServer server;
     public final ServerPlayerGameMode gameMode;
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index a7014ef7d826cebdd38d7ea5fb6caa613bc144f7..9e1d4cab81a9930e66d8079a9c7dcf16bc393ed4 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -252,6 +252,11 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     private static final int NO_BLOCK_UPDATES_TO_ACK = -1;
     private static final int PENDING_MESSAGE_DISCONNECT_THRESHOLD = 4096;
     public final Connection connection;
+    // Suki start - OBFHELPER
+    public Connection _connection() {
+        return this.connection;
+    }
+    // Suki end - OBFHELPER
     private final MinecraftServer server;
     public ServerPlayer player;
     private int tickCount;
@@ -2228,6 +2233,14 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         }
     }
 
+    // Suki start - OBFHELPER
+
+    public void _send(Packet<?> packet, @Nullable PacketSendListener listener) {
+        this.send(packet, listener);
+    }
+
+    // Suki end - OBFHELPER
+
     @Override
     public void handleSetCarriedItem(ServerboundSetCarriedItemPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
diff --git a/src/main/java/net/minecraft/world/entity/EntityType.java b/src/main/java/net/minecraft/world/entity/EntityType.java
index ec0319dd4b115e18b368027cc5dbe4d4d9c64840..d3b35e533fd80bc497d8a12230902d423c667378 100644
--- a/src/main/java/net/minecraft/world/entity/EntityType.java
+++ b/src/main/java/net/minecraft/world/entity/EntityType.java
@@ -19,6 +19,7 @@ import net.minecraft.core.Registry;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.Tag;
+import net.minecraft.network.Connection;
 import net.minecraft.network.chat.Component;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
@@ -261,6 +262,11 @@ public class EntityType<T extends Entity> implements EntityTypeTest<Entity, T> {
     public static final EntityType<Turtle> TURTLE = EntityType.register("turtle", EntityType.Builder.of(Turtle::new, MobCategory.CREATURE).sized(1.2F, 0.4F).clientTrackingRange(10));
     public static final EntityType<Vex> VEX = EntityType.register("vex", EntityType.Builder.of(Vex::new, MobCategory.MONSTER).fireImmune().sized(0.4F, 0.8F).clientTrackingRange(8));
     public static final EntityType<Villager> VILLAGER = EntityType.register("villager", EntityType.Builder.of(Villager::new, MobCategory.MISC).sized(0.6F, 1.95F).clientTrackingRange(10));
+    // Suki start - OBFHELPER
+    public static EntityType<Villager> _VILLAGER() {
+        return VILLAGER;
+    }
+    // Suki end - OBFHELPER
     public static final EntityType<Vindicator> VINDICATOR = EntityType.register("vindicator", EntityType.Builder.of(Vindicator::new, MobCategory.MONSTER).sized(0.6F, 1.95F).clientTrackingRange(8));
     public static final EntityType<WanderingTrader> WANDERING_TRADER = EntityType.register("wandering_trader", EntityType.Builder.of(WanderingTrader::new, MobCategory.CREATURE).sized(0.6F, 1.95F).clientTrackingRange(10));
     public static final EntityType<Warden> WARDEN = EntityType.register("warden", EntityType.Builder.of(Warden::new, MobCategory.MONSTER).sized(0.9F, 2.9F).clientTrackingRange(16).fireImmune());
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index cd47b6882509888f7d34e95b4687ca7a9eab6caf..7da482dca5a0da9badff64736cfbfa37259208ce 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -140,6 +140,11 @@ public final class ItemStack {
     private Item item;
     @Nullable
     public CompoundTag tag;
+    // Suki start - OBFHELPER
+    public @Nullable CompoundTag _tag() {
+        return this.tag;
+    }
+    // Suki end - OBFHELPER
     private boolean emptyCacheFlag;
     @Nullable
     private Entity entityRepresentation;
