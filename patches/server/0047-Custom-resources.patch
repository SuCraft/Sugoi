From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Sat, 25 Jun 2022 13:28:30 +0200
Subject: [PATCH] Custom resources


diff --git a/src/main/java/net/minecraft/commands/SharedSuggestionProvider.java b/src/main/java/net/minecraft/commands/SharedSuggestionProvider.java
index 9356def84e0508f368f097b05fc50439f9499a60..179cf7727908a3c572865a6cdf912c170a4702d6 100644
--- a/src/main/java/net/minecraft/commands/SharedSuggestionProvider.java
+++ b/src/main/java/net/minecraft/commands/SharedSuggestionProvider.java
@@ -79,7 +79,7 @@ public interface SharedSuggestionProvider {
                 if (matchesSubStr(remaining, string)) {
                     action.accept(object);
                 }
-            } else if (matchesSubStr(remaining, resourceLocation.getNamespace()) || resourceLocation.getNamespace().equals("minecraft") && matchesSubStr(remaining, resourceLocation.getPath())) {
+            } else if (matchesSubStr(remaining, resourceLocation.getNamespace()) || (resourceLocation.getNamespace().equals("minecraft") || resourceLocation.getNamespace().equals("sucraft")) && matchesSubStr(remaining, resourceLocation.getPath())) { // Suki - custom resources
                 action.accept(object);
             }
         }
diff --git a/src/main/java/net/minecraft/core/MappedRegistry.java b/src/main/java/net/minecraft/core/MappedRegistry.java
index 7afb07a24c21706473c28a058214e81ebff1ab0a..0b7bfb95fbe8d9dbf1079d01b7d517df9f106d6a 100644
--- a/src/main/java/net/minecraft/core/MappedRegistry.java
+++ b/src/main/java/net/minecraft/core/MappedRegistry.java
@@ -29,8 +29,18 @@ import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.tags.StructureTags;
 import net.minecraft.tags.TagKey;
 import net.minecraft.util.RandomSource;
+import net.minecraft.world.level.biome.Biome;
+import net.minecraft.world.level.biome.Biomes;
+import net.minecraft.world.level.levelgen.structure.Structure;
+import org.sucraft.suki.biome.SuCraftBiomeTags;
+import org.sucraft.suki.biome.SuCraftBiomeTagsProvider;
+import org.sucraft.suki.data.SuCraftTagsProvider;
+import org.sucraft.suki.structure.SuCraftBuiltinStructures;
+import org.sucraft.suki.structure.SuCraftStructureTagsProvider;
 import org.apache.commons.lang3.Validate;
 import org.slf4j.Logger;
 
@@ -381,6 +391,13 @@ public class MappedRegistry<T> extends WritableRegistry<T> {
         this.byKey.values().forEach((entry) -> {
             map.put(entry, new ArrayList<>());
         });
+        // Suki start - custom resources
+        if (this.key().equals(STRUCTURE_REGISTRY)) {
+            tagEntries = ((SuCraftTagsProvider<T>) new SuCraftStructureTagsProvider((Registry<Structure>) this)).run(tagEntries);
+        } else if (this.key().equals(BIOME_REGISTRY)) {
+            tagEntries = ((SuCraftTagsProvider<T>) new SuCraftBiomeTagsProvider((Registry<Biome>) this)).run(tagEntries);
+        }
+        // Suki end - custom resource
         tagEntries.forEach((tag, entries) -> {
             for(Holder<T> holder : entries) {
                 if (!holder.isValidInRegistry(this)) {
diff --git a/src/main/java/net/minecraft/data/Main.java b/src/main/java/net/minecraft/data/Main.java
index 0c12a78498708fbfad6b658ed930969bcc31ec23..ecd2166991dff09ecd6ea0a7471c878e0cdb689e 100644
--- a/src/main/java/net/minecraft/data/Main.java
+++ b/src/main/java/net/minecraft/data/Main.java
@@ -4,6 +4,7 @@ import java.io.IOException;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.Collection;
+import java.util.List;
 import java.util.stream.Collectors;
 import joptsimple.OptionParser;
 import joptsimple.OptionSet;
diff --git a/src/main/java/net/minecraft/data/worldgen/Structures.java b/src/main/java/net/minecraft/data/worldgen/Structures.java
index ae1d5d7f347491485a4101e81501213759e3cfa5..e128dc9d88d0dbac591e79e6fcffff84334d0f34 100644
--- a/src/main/java/net/minecraft/data/worldgen/Structures.java
+++ b/src/main/java/net/minecraft/data/worldgen/Structures.java
@@ -44,6 +44,7 @@ import net.minecraft.world.level.levelgen.structure.structures.ShipwreckStructur
 import net.minecraft.world.level.levelgen.structure.structures.StrongholdStructure;
 import net.minecraft.world.level.levelgen.structure.structures.SwampHutStructure;
 import net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionStructure;
+import org.sucraft.suki.structure.SuCraftStructures;
 
 public class Structures {
     public static final Holder<Structure> PILLAGER_OUTPOST = register(BuiltinStructures.PILLAGER_OUTPOST, new JigsawStructure(structure(BiomeTags.HAS_PILLAGER_OUTPOST, Map.of(MobCategory.MONSTER, new StructureSpawnOverride(StructureSpawnOverride.BoundingBoxType.STRUCTURE, WeightedRandomList.create(new MobSpawnSettings.SpawnerData(EntityType.PILLAGER, 1, 1, 1)))), GenerationStep.Decoration.SURFACE_STRUCTURES, TerrainAdjustment.BEARD_THIN), PillagerOutpostPools.START, 7, ConstantHeight.of(VerticalAnchor.absolute(0)), true, Heightmap.Types.WORLD_SURFACE_WG));
@@ -84,26 +85,28 @@ public class Structures {
     })), GenerationStep.Decoration.UNDERGROUND_DECORATION, TerrainAdjustment.BEARD_BOX), AncientCityStructurePieces.START, Optional.of(new ResourceLocation("city_anchor")), 7, ConstantHeight.of(VerticalAnchor.absolute(-27)), false, Optional.empty(), 116));
 
     public static Holder<? extends Structure> bootstrap(Registry<Structure> registry) {
-        return MINESHAFT;
+        var bootstrapValue = MINESHAFT;
+        SuCraftStructures.bootstrap(registry);
+        return bootstrapValue;
     }
 
-    private static Structure.StructureSettings structure(TagKey<Biome> biomeTag, Map<MobCategory, StructureSpawnOverride> spawns, GenerationStep.Decoration featureStep, TerrainAdjustment terrainAdaptation) {
+    public static Structure.StructureSettings structure(TagKey<Biome> biomeTag, Map<MobCategory, StructureSpawnOverride> spawns, GenerationStep.Decoration featureStep, TerrainAdjustment terrainAdaptation) { // Suki - custom resources
         return new Structure.StructureSettings(biomes(biomeTag), spawns, featureStep, terrainAdaptation);
     }
 
-    private static Structure.StructureSettings structure(TagKey<Biome> biomeTag, GenerationStep.Decoration featureStep, TerrainAdjustment terrainAdaptation) {
+    public static Structure.StructureSettings structure(TagKey<Biome> biomeTag, GenerationStep.Decoration featureStep, TerrainAdjustment terrainAdaptation) { // Suki - custom resources
         return structure(biomeTag, Map.of(), featureStep, terrainAdaptation);
     }
 
-    private static Structure.StructureSettings structure(TagKey<Biome> biomeTag, TerrainAdjustment terrainAdaptation) {
+    public static Structure.StructureSettings structure(TagKey<Biome> biomeTag, TerrainAdjustment terrainAdaptation) { // Suki - custom resources
         return structure(biomeTag, Map.of(), GenerationStep.Decoration.SURFACE_STRUCTURES, terrainAdaptation);
     }
 
-    private static Holder<Structure> register(ResourceKey<Structure> key, Structure structure) {
+    public static Holder<Structure> register(ResourceKey<Structure> key, Structure structure) { // Suki - custom resources
         return BuiltinRegistries.register(BuiltinRegistries.STRUCTURES, key, structure);
     }
 
-    private static HolderSet<Biome> biomes(TagKey<Biome> key) {
+    public static HolderSet<Biome> biomes(TagKey<Biome> key) { // Suki - custom resources
         return BuiltinRegistries.BIOME.getOrCreateTag(key);
     }
 }
diff --git a/src/main/java/net/minecraft/resources/ResourceLocation.java b/src/main/java/net/minecraft/resources/ResourceLocation.java
index 4e767dd8f9594e8a8f5d71e2bfd8c976c0032f98..50c284854aa2404cc821ba9cec66347c5d642c5e 100644
--- a/src/main/java/net/minecraft/resources/ResourceLocation.java
+++ b/src/main/java/net/minecraft/resources/ResourceLocation.java
@@ -25,6 +25,7 @@ public class ResourceLocation implements Comparable<ResourceLocation> {
     public static final char NAMESPACE_SEPARATOR = ':';
     public static final String DEFAULT_NAMESPACE = "minecraft";
     public static final String REALMS_NAMESPACE = "realms";
+    public static final String SUCRAFT_NAMESPACE = "sucraft"; // Suki - custom resources
     protected final String namespace;
     protected final String path;
     private String cachedString = null; // Mirai - c2me: opts allocs
@@ -47,6 +48,14 @@ public class ResourceLocation implements Comparable<ResourceLocation> {
         this(new String[]{namespace, path});
     }
 
+    // Suki start - custom resources
+
+    public static ResourceLocation sucraft(String id) {
+        return new ResourceLocation(SUCRAFT_NAMESPACE, id);
+    }
+
+    // Suki end - custom resources
+
     public static ResourceLocation of(String id, char delimiter) {
         return new ResourceLocation(decompose(id, delimiter));
     }
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 72adf5879fc476e1495cfeaf8df31212750e1200..614cb625e65a408b52b62711be387cb9a33d676a 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -27,6 +27,8 @@ import net.minecraft.SharedConstants;
 import net.minecraft.Util;
 import net.minecraft.commands.Commands;
 import net.minecraft.core.RegistryAccess;
+import net.minecraft.data.CachedOutput;
+import net.minecraft.data.DataGenerator;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
@@ -55,6 +57,9 @@ import net.minecraft.world.level.levelgen.presets.WorldPresets;
 import net.minecraft.world.level.storage.LevelResource;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import net.minecraft.world.level.storage.LevelSummary;
+import org.sucraft.suki.biome.SuCraftBiomeTagsProvider;
+import org.sucraft.suki.data.BlackHoleCachedOutput;
+import org.sucraft.suki.structure.SuCraftStructureTagsProvider;
 import org.slf4j.Logger;
 
 // CraftBukkit start
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index fd74cc9c0dab84b176f7da3fbbbdbc8fd3a7e26d..fbf69c402ba97b99319d0df90b501d43686bce8c 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -666,14 +666,29 @@ public abstract class BlockBehaviour {
 
     public abstract static class BlockStateBase extends StateHolder<Block, BlockState> {
 
-        private final int lightEmission; public final int getEmittedLight() { return this.lightEmission; } // Paper - OBFHELPER
-        private final boolean useShapeForLightOcclusion; public final boolean isTransparentOnSomeFaces() { return this.useShapeForLightOcclusion; } // Paper - OBFHELPER
+        private final int lightEmission;
+
+        public final int getEmittedLight() {
+            return this.lightEmission;
+        } // Paper - OBFHELPER
+
+        private final boolean useShapeForLightOcclusion;
+
+        public final boolean isTransparentOnSomeFaces() {
+            return this.useShapeForLightOcclusion;
+        } // Paper - OBFHELPER
+
         private final boolean isAir;
         private final Material material;
         private final MaterialColor materialColor;
         public final float destroySpeed;
         private final boolean requiresCorrectToolForDrops;
-        private final boolean canOcclude; public final boolean isOpaque() { return this.canOcclude; } // Paper - OBFHELPER
+        private final boolean canOcclude;
+
+        public final boolean isOpaque() {
+            return this.canOcclude;
+        } // Paper - OBFHELPER
+
         private final BlockBehaviour.StatePredicate isRedstoneConductor;
         private final BlockBehaviour.StatePredicate isSuffocating;
         private final BlockBehaviour.StatePredicate isViewBlocking;
@@ -703,20 +718,24 @@ public abstract class BlockBehaviour {
             this.offsetType = (BlockBehaviour.OffsetType) blockbase_info.offsetType.apply(this.asState());
             this.conditionallyFullOpaque = this.isOpaque() & this.isTransparentOnSomeFaces(); // Paper
         }
+
         // Paper start - impl cached craft block data, lazy load to fix issue with loading at the wrong time
         private org.bukkit.craftbukkit.block.data.CraftBlockData cachedCraftBlockData;
 
         public org.bukkit.craftbukkit.block.data.CraftBlockData createCraftBlockData() {
-            if (cachedCraftBlockData == null) cachedCraftBlockData = org.bukkit.craftbukkit.block.data.CraftBlockData.createData(asState());
+            if (cachedCraftBlockData == null)
+                cachedCraftBlockData = org.bukkit.craftbukkit.block.data.CraftBlockData.createData(asState());
             return (org.bukkit.craftbukkit.block.data.CraftBlockData) cachedCraftBlockData.clone();
         }
         // Paper end
 
         // Paper start
         protected boolean shapeExceedsCube = true;
+
         public final boolean shapeExceedsCube() {
             return this.shapeExceedsCube;
         }
+
         // Paper end
         // Paper start
         protected boolean isTicking;
@@ -724,15 +743,18 @@ public abstract class BlockBehaviour {
         // Paper end
         // Paper start
         protected int opacityIfCached = -1;
+
         // ret -1 if opacity is dynamic, or -1 if the block is conditionally full opaque, else return opacity in [0, 15]
         public final int getOpacityIfCached() {
             return this.opacityIfCached;
         }
 
         protected final boolean conditionallyFullOpaque;
+
         public final boolean isConditionallyFullOpaque() {
             return this.conditionallyFullOpaque;
         }
+
         // Paper end
         // Paper start
         private long blockCollisionBehavior = io.papermc.paper.util.CollisionUtil.KNOWN_SPECIAL_BLOCK;
diff --git a/src/main/java/org/sucraft/suki/biome/SuCraftBiomeTags.java b/src/main/java/org/sucraft/suki/biome/SuCraftBiomeTags.java
new file mode 100644
index 0000000000000000000000000000000000000000..ab02c2e31c42add6360e88bd5ed7e3aafabb8671
--- /dev/null
+++ b/src/main/java/org/sucraft/suki/biome/SuCraftBiomeTags.java
@@ -0,0 +1,19 @@
+// Suki - custom resources
+
+package org.sucraft.suki.biome;
+
+import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.tags.TagKey;
+import net.minecraft.world.level.biome.Biome;
+
+/**
+ * Based on {@link net.minecraft.tags.BiomeTags}
+ */
+public class SuCraftBiomeTags {
+
+    private static TagKey<Biome> create(String id) {
+        return TagKey.create(Registry.BIOME_REGISTRY, ResourceLocation.sucraft(id));
+    }
+
+}
diff --git a/src/main/java/org/sucraft/suki/biome/SuCraftBiomeTagsProvider.java b/src/main/java/org/sucraft/suki/biome/SuCraftBiomeTagsProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..186e426e5d41e38b3f40ba6e160f13655b99e7db
--- /dev/null
+++ b/src/main/java/org/sucraft/suki/biome/SuCraftBiomeTagsProvider.java
@@ -0,0 +1,21 @@
+// Suki - custom resources
+
+package org.sucraft.suki.biome;
+
+import net.minecraft.core.Registry;
+import net.minecraft.world.level.biome.Biome;
+import org.sucraft.suki.data.SuCraftTagsProvider;
+
+/**
+ * Based on {@link net.minecraft.data.tags.BiomeTagsProvider}
+ */
+public class SuCraftBiomeTagsProvider extends SuCraftTagsProvider<Biome> {
+
+    public SuCraftBiomeTagsProvider(Registry<Biome> registry) {
+        super(registry);
+    }
+
+    @Override
+    protected void addTags() {}
+
+}
diff --git a/src/main/java/org/sucraft/suki/data/BlackHoleCachedOutput.java b/src/main/java/org/sucraft/suki/data/BlackHoleCachedOutput.java
new file mode 100644
index 0000000000000000000000000000000000000000..701c8dae3671343db0010c15bf0d01de7cf57b08
--- /dev/null
+++ b/src/main/java/org/sucraft/suki/data/BlackHoleCachedOutput.java
@@ -0,0 +1,19 @@
+// Suki - custom resources
+
+package org.sucraft.suki.data;
+
+import com.google.common.hash.HashCode;
+import net.minecraft.data.CachedOutput;
+
+import java.io.IOException;
+import java.nio.file.Path;
+
+/**
+ * An implementation of {@link CachedOutput} that does nothing.
+ */
+public class BlackHoleCachedOutput implements CachedOutput {
+
+    @Override
+    public void writeIfNeeded(Path path, byte[] data, HashCode hashCode) {}
+
+}
diff --git a/src/main/java/org/sucraft/suki/data/SuCraftTagsProvider.java b/src/main/java/org/sucraft/suki/data/SuCraftTagsProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..219c00b7e77691954e7f4a91fe3d19af901ab52a
--- /dev/null
+++ b/src/main/java/org/sucraft/suki/data/SuCraftTagsProvider.java
@@ -0,0 +1,146 @@
+// Suki - custom resources
+
+package org.sucraft.suki.data;
+
+import com.google.common.collect.Maps;
+import net.minecraft.core.Holder;
+import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceKey;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.tags.TagBuilder;
+import net.minecraft.tags.TagEntry;
+import net.minecraft.tags.TagKey;
+import org.jetbrains.annotations.Nullable;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Based on {@link net.minecraft.data.tags.TagsProvider}
+ */
+public abstract class SuCraftTagsProvider<T> {
+
+    protected final Registry<T> registry;
+
+    private final Map<ResourceLocation, TagBuilder> builders = Maps.newLinkedHashMap();
+
+    protected SuCraftTagsProvider(Registry<T> registry) {
+        this.registry = registry;
+    }
+
+    protected abstract void addTags();
+
+    public Map<TagKey<T>, List<Holder<T>>> run(Map<TagKey<T>, List<Holder<T>>> existingRegistryTagEntries) {
+
+        // Make the existing tag entries for the registry mutable
+        Map<TagKey<T>, List<Holder<T>>> updatedRegistryTagEntries = new HashMap<>(existingRegistryTagEntries);
+
+        // Define how to look up the elements to add to a tag, when given a ResourceLocation to the element, or another tag (which must have been defined before the calling of addTags or earlier within addTags than the tag it is to be added to)
+        TagEntry.Lookup<T> lookup = new TagEntry.Lookup<>() {
+
+            @Nullable
+            @Override
+            public T element(ResourceLocation elementId) {
+                return SuCraftTagsProvider.this.registry.get(elementId);
+            }
+
+            @Nullable
+            @Override
+            public Collection<T> tag(ResourceLocation otherTagId) {
+                TagKey<T> otherTagKey = TagKey.create(SuCraftTagsProvider.this.registry.key(), otherTagId);
+                return updatedRegistryTagEntries.get(otherTagKey).stream().map(Holder::value).toList();
+            }
+
+        };
+
+        // Create the builders: done by running this method similar to TagsProvider.addTags, which defines the elements for each tag that we wish to add elements to (both elements for custom tags and extra elements for existing tags)
+        this.addTags();
+        // For each tag for which entries were added in addTags
+        this.builders.forEach((tagId, builder) -> {
+            TagKey<T> tagKey = TagKey.create(SuCraftTagsProvider.this.registry.key(), tagId);
+            // Get the tag entries that were added for this tag in addTags
+            List<TagEntry> tagEntriesToMerge = builder.build();
+            // Filter only thetag  entries that exist (i.e. elements that exist in the registry, or tags that were defined earlier)
+            List<TagEntry> validTagEntriesToMerge = new ArrayList<>(tagEntriesToMerge.size());
+            tagEntriesToMerge.forEach(tagEntry -> {
+                if (tagEntry.verifyIfPresent(this.registry::containsKey, this.builders::containsKey)) { // Actually using existingRegistryEntries instead of this.builders seems more logical but the vanilla code uses builders so we'll just go with that
+                    validTagEntriesToMerge.add(tagEntry);
+                } else {
+                    MinecraftServer.LOGGER.error(String.format("The tag definition %s could not be fully defined as it is missing following reference: %s", tagId, tagEntry));
+                }
+            });
+            // For each tag entry to merge, merge it by looking up the resulting elements that would be added and adding them
+            validTagEntriesToMerge.forEach(tagEntry ->
+                tagEntry.build(
+                    lookup,
+                    newElement -> {
+                        updatedRegistryTagEntries.compute(tagKey, (sameTagKey, elementsForTag) -> {
+                            if (elementsForTag == null) {
+                                // Make sure the list of elements for this tag exists
+                                elementsForTag = new ArrayList<>(1);
+                            } else if (!(elementsForTag instanceof ArrayList)) {
+                                // Make sure the elements are mutable
+                                elementsForTag = new ArrayList<>(elementsForTag);
+                            }
+                            // Add the new element
+                            var holder = this.registry.getOrCreateHolderOrThrow(this.registry.getResourceKey(newElement).get());
+                            elementsForTag.add(holder);
+                            // Return the new list of elements for this tag
+                            return elementsForTag;
+                        });
+                    }
+                )
+            );
+        });
+        // Return the updated tag entries for the registry
+        return updatedRegistryTagEntries;
+
+    }
+
+    protected TagAppender<T> tag(TagKey<T> tag) {
+        TagBuilder tagBuilder = this.getOrCreateRawBuilder(tag);
+        return new TagAppender<>(tagBuilder);
+    }
+
+    protected TagBuilder getOrCreateRawBuilder(TagKey<T> tag) {
+        return this.builders.computeIfAbsent(tag.location(), (id) -> {
+            return TagBuilder.create();
+        });
+    }
+
+    protected static class TagAppender<T> {
+        private final TagBuilder builder;
+
+        TagAppender(TagBuilder builder) {
+            this.builder = builder;
+        }
+
+        @SafeVarargs
+        public final TagAppender<T> add(ResourceKey<T>... keys) {
+            for(ResourceKey<T> resourceKey : keys) {
+                this.builder.addElement(resourceKey.location());
+            }
+
+            return this;
+        }
+
+        public TagAppender<T> addOptional(ResourceLocation id) {
+            this.builder.addOptionalElement(id);
+            return this;
+        }
+
+        public TagAppender<T> addTag(TagKey<T> identifiedTag) {
+            this.builder.addTag(identifiedTag.location());
+            return this;
+        }
+
+        public TagAppender<T> addOptionalTag(ResourceLocation id) {
+            this.builder.addOptionalTag(id);
+            return this;
+        }
+    }
+
+}
diff --git a/src/main/java/org/sucraft/suki/structure/SuCraftBuiltinStructures.java b/src/main/java/org/sucraft/suki/structure/SuCraftBuiltinStructures.java
new file mode 100644
index 0000000000000000000000000000000000000000..c3652f47082b5b26c828d79acddfe4f4ea325664
--- /dev/null
+++ b/src/main/java/org/sucraft/suki/structure/SuCraftBuiltinStructures.java
@@ -0,0 +1,19 @@
+// Suki - custom resources
+
+package org.sucraft.suki.structure;
+
+import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceKey;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.level.levelgen.structure.Structure;
+
+/**
+ * Based on {@link net.minecraft.world.level.levelgen.structure.BuiltinStructures}
+ */
+public interface SuCraftBuiltinStructures {
+
+    private static ResourceKey<Structure> createKey(String id) {
+        return ResourceKey.create(Registry.STRUCTURE_REGISTRY, ResourceLocation.sucraft(id));
+    }
+
+}
diff --git a/src/main/java/org/sucraft/suki/structure/SuCraftStructureTags.java b/src/main/java/org/sucraft/suki/structure/SuCraftStructureTags.java
new file mode 100644
index 0000000000000000000000000000000000000000..7dd24879a09c382844f3cea0c11c0e50b87ce96e
--- /dev/null
+++ b/src/main/java/org/sucraft/suki/structure/SuCraftStructureTags.java
@@ -0,0 +1,19 @@
+// Suki - custom resources
+
+package org.sucraft.suki.structure;
+
+import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.tags.TagKey;
+import net.minecraft.world.level.levelgen.structure.Structure;
+
+/**
+ * Based on {@link net.minecraft.tags.StructureTags}
+ */
+public interface SuCraftStructureTags {
+
+    private static TagKey<Structure> create(String id) {
+        return TagKey.create(Registry.STRUCTURE_REGISTRY, ResourceLocation.sucraft(id));
+    }
+    
+}
diff --git a/src/main/java/org/sucraft/suki/structure/SuCraftStructureTagsProvider.java b/src/main/java/org/sucraft/suki/structure/SuCraftStructureTagsProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..2a7b0db070bd61a43340d100d123c7b4ccd1ad25
--- /dev/null
+++ b/src/main/java/org/sucraft/suki/structure/SuCraftStructureTagsProvider.java
@@ -0,0 +1,21 @@
+// Suki - custom resources
+
+package org.sucraft.suki.structure;
+
+import net.minecraft.core.Registry;
+import net.minecraft.world.level.levelgen.structure.Structure;
+import org.sucraft.suki.data.SuCraftTagsProvider;
+
+/**
+ * Based on {@link net.minecraft.data.tags.StructureTagsProvider}
+ */
+public class SuCraftStructureTagsProvider extends SuCraftTagsProvider<Structure> {
+
+    public SuCraftStructureTagsProvider(Registry<Structure> registry) {
+        super(registry);
+    }
+
+    @Override
+    protected void addTags() {}
+
+}
diff --git a/src/main/java/org/sucraft/suki/structure/SuCraftStructures.java b/src/main/java/org/sucraft/suki/structure/SuCraftStructures.java
new file mode 100644
index 0000000000000000000000000000000000000000..1a7997c5ff8716956477d3bc9728958da245d213
--- /dev/null
+++ b/src/main/java/org/sucraft/suki/structure/SuCraftStructures.java
@@ -0,0 +1,49 @@
+// Suki - custom resources
+
+package org.sucraft.suki.structure;
+
+import net.minecraft.core.Holder;
+import net.minecraft.core.HolderSet;
+import net.minecraft.core.Registry;
+import net.minecraft.data.worldgen.Structures;
+import net.minecraft.resources.ResourceKey;
+import net.minecraft.tags.TagKey;
+import net.minecraft.world.entity.MobCategory;
+import net.minecraft.world.level.biome.Biome;
+import net.minecraft.world.level.levelgen.GenerationStep;
+import net.minecraft.world.level.levelgen.structure.Structure;
+import net.minecraft.world.level.levelgen.structure.StructureSpawnOverride;
+import net.minecraft.world.level.levelgen.structure.TerrainAdjustment;
+
+import java.util.Map;
+
+/**
+ * Based on {@link net.minecraft.data.worldgen.Structures}
+ */
+public class SuCraftStructures {
+
+    public static Holder<? extends Structure> bootstrap(Registry<Structure> registry) {
+       return null; // TODO fil with first structure added
+    }
+
+    public static Structure.StructureSettings structure(TagKey<Biome> biomeTag, Map<MobCategory, StructureSpawnOverride> spawns, GenerationStep.Decoration featureStep, TerrainAdjustment terrainAdaptation) {
+        return Structures.structure(biomeTag, spawns, featureStep, terrainAdaptation);
+    }
+
+    public static Structure.StructureSettings structure(TagKey<Biome> biomeTag, GenerationStep.Decoration featureStep, TerrainAdjustment terrainAdaptation) {
+        return Structures.structure(biomeTag, featureStep, terrainAdaptation);
+    }
+
+    public static Structure.StructureSettings structure(TagKey<Biome> biomeTag, TerrainAdjustment terrainAdaptation) {
+        return Structures.structure(biomeTag, terrainAdaptation);
+    }
+
+    public static Holder<Structure> register(ResourceKey<Structure> key, Structure structure) {
+        return Structures.register(key, structure);
+    }
+
+    public static HolderSet<Biome> biomes(TagKey<Biome> key) {
+        return Structures.biomes(key);
+    }
+
+}
