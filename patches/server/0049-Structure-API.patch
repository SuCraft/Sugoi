From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Sun, 19 Jun 2022 00:13:27 +0200
Subject: [PATCH] Structure API


diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/BoundingBox.java b/src/main/java/net/minecraft/world/level/levelgen/structure/BoundingBox.java
index 4947f9a00015b3dba1c829287defce71659ec908..636b868297ea3586d9357cfbac0ace4b4cede732 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/BoundingBox.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/BoundingBox.java
@@ -13,8 +13,14 @@ import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Vec3i;
+import org.sucraft.suki.structure.CraftWorldStructure;
+import org.sucraft.suki.structure.CraftWorldStructureBoundingBox;
+import org.sucraft.suki.structure.CraftWorldStructurePiece;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 
+import javax.annotation.Nullable;
+
 public class BoundingBox {
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final Codec<BoundingBox> CODEC = Codec.INT_STREAM.comapFlatMap((values) -> {
@@ -31,6 +37,19 @@ public class BoundingBox {
     private int maxY;
     private int maxZ;
 
+    // Suki start - structure API
+
+    private @Nullable CraftWorldStructureBoundingBox bukkit = null;
+
+    public @NotNull CraftWorldStructureBoundingBox bukkit() {
+        if (this.bukkit == null) {
+            this.bukkit = new CraftWorldStructureBoundingBox(this);
+        }
+        return this.bukkit;
+    }
+
+    // Suki end - structure API
+
     public BoundingBox(BlockPos pos) {
         this(pos.getX(), pos.getY(), pos.getZ(), pos.getX(), pos.getY(), pos.getZ());
     }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
index 048e03bd416fc3b905df1d06117a99b2b47135da..6f062ad8b3a87ad9e943267c538a0ac306cd84a3 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StructurePiece.java
@@ -34,6 +34,13 @@ import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext;
 import net.minecraft.world.level.levelgen.structure.pieces.StructurePieceType;
 import net.minecraft.world.level.material.FluidState;
+import org.sucraft.suki.structure.CraftWorldStructure;
+import org.sucraft.suki.structure.CraftWorldStructurePiece;
+import org.apache.commons.lang3.tuple.ImmutableTriple;
+import org.apache.commons.lang3.tuple.Triple;
+import org.apache.logging.log4j.util.TriConsumer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 
 public abstract class StructurePiece {
@@ -48,6 +55,19 @@ public abstract class StructurePiece {
     private final StructurePieceType type;
     private static final Set<Block> SHAPE_CHECK_BLOCKS = ImmutableSet.<Block>builder().add(Blocks.NETHER_BRICK_FENCE).add(Blocks.TORCH).add(Blocks.WALL_TORCH).add(Blocks.OAK_FENCE).add(Blocks.SPRUCE_FENCE).add(Blocks.DARK_OAK_FENCE).add(Blocks.ACACIA_FENCE).add(Blocks.BIRCH_FENCE).add(Blocks.JUNGLE_FENCE).add(Blocks.LADDER).add(Blocks.IRON_BARS).build();
 
+    // Suki start - structure API
+
+    private @Nullable CraftWorldStructurePiece bukkit = null;
+
+    public @NotNull CraftWorldStructurePiece bukkit(CraftWorldStructure parent) {
+        if (this.bukkit == null) {
+            this.bukkit = new CraftWorldStructurePiece(this, parent);
+        }
+        return this.bukkit;
+    }
+
+    // Suki end - structure API
+
     protected StructurePiece(StructurePieceType type, int length, BoundingBox boundingBox) {
         this.type = type;
         this.genDepth = length;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureStart.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureStart.java
index 902a35b63c0b1c87eff3d850589ba1d272d0cace..fdcd933c6afd30d591e6a48b0ed931b81d07a7b3 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureStart.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureStart.java
@@ -3,12 +3,12 @@ package net.minecraft.world.level.levelgen.structure;
 import com.mojang.logging.LogUtils;
 import java.util.List;
 import javax.annotation.Nullable;
+import net.minecraft.util.RandomSource;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.resources.ResourceLocation;
-import net.minecraft.util.RandomSource;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.StructureManager;
 import net.minecraft.world.level.WorldGenLevel;
@@ -17,6 +17,9 @@ import net.minecraft.world.level.levelgen.structure.pieces.PiecesContainer;
 import net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext;
 import net.minecraft.world.level.levelgen.structure.structures.OceanMonumentStructure;
 import org.slf4j.Logger;
+import org.sucraft.suki.structure.CraftWorldStructure;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.jetbrains.annotations.NotNull;
 
 public final class StructureStart {
     public static final String INVALID_START_ID = "INVALID";
@@ -29,6 +32,19 @@ public final class StructureStart {
     @Nullable
     private volatile BoundingBox cachedBoundingBox;
 
+    // Suki start - structure API
+
+    private @Nullable CraftWorldStructure bukkit = null;
+
+    public @NotNull CraftWorldStructure bukkit(CraftWorld world) {
+        if (this.bukkit == null) {
+            this.bukkit = new CraftWorldStructure(this, world);
+        }
+        return this.bukkit;
+    }
+
+    // Suki end - structure API
+
     public StructureStart(Structure structure, ChunkPos pos, int references, PiecesContainer children) {
         this.structure = structure;
         this.chunkPos = pos;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 5eac5eb8b57a33113ba4ce747e66c461f1230163..052440b17d03ddf6b81c9d481cea82687d9af06d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -6,6 +6,7 @@ import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.mojang.datafixers.util.Pair;
 import io.papermc.paper.configuration.GlobalConfiguration;
+import io.papermc.paper.world.structure.ConfiguredStructure;
 import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
@@ -27,6 +28,7 @@ import java.util.stream.Collectors;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
 import net.minecraft.core.HolderSet;
+import net.minecraft.data.BuiltinRegistries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.network.protocol.game.ClientboundCustomSoundPacket;
@@ -54,13 +56,17 @@ import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.ClipContext;
 import net.minecraft.world.level.Explosion;
 import net.minecraft.world.level.GameRules;
+import net.minecraft.world.level.StructureManager;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.ImposterProtoChunk;
+import net.minecraft.world.level.levelgen.structure.StructureStart;
 import net.minecraft.world.level.storage.LevelResource;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
+import org.sucraft.suki.structure.CraftWorldStructure;
+import org.sucraft.suki.structure.WorldStructure;
 import org.apache.commons.lang.Validate;
 import org.bukkit.BlockChangeDelegate;
 import org.bukkit.Bukkit;
@@ -133,6 +139,8 @@ import org.bukkit.util.Consumer;
 import org.bukkit.util.RayTraceResult;
 import org.bukkit.util.StructureSearchResult;
 import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 public class CraftWorld extends CraftRegionAccessor implements World {
     public static final int CUSTOM_DIMENSION_OFFSET = 10;
@@ -225,6 +233,45 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
     // Paper end
 
+    // Suki start - structure API
+
+    @Override
+    public @NotNull List<@NotNull WorldStructure> getWorldStructuresAt(@NotNull Block block, @Nullable ConfiguredStructure structureType) {
+        BlockPos blockPos = ((CraftBlock) block).getPosition();
+        ChunkPos chunkPos = ((CraftChunk) block.getChunk()).getHandle().getPos();
+        StructureManager featureManager = this.getHandle().structureManager();
+
+        final Set<net.minecraft.world.level.levelgen.structure.Structure> features;
+        if (structureType != null) {
+//            // Base on CraftWorld.locateNearestStructure
+//            features = this.structureCache.computeIfAbsent(structureType, (type) -> {
+//                final Registry<StructureFeature<?>> structureFeatureRegistry = this.getHandle().registryAccess().registryOrThrow(Registry.STRUCTURE_FEATURE_REGISTRY);
+//                return this.getHandle().registryAccess().registryOrThrow(Registry.CONFIGURED_STRUCTURE_FEATURE_REGISTRY).holders().filter(holder -> {
+//                    return structureType.getKey().equals(CraftNamespacedKey.fromMinecraft(Objects.requireNonNull(structureFeatureRegistry.getKey(holder.value().feature))));
+//                }).toList();
+//            }).stream().map(holder -> holder.value()).toList();
+            features = Collections.singleton(io.papermc.paper.registry.PaperRegistry.getRegistry(io.papermc.paper.registry.RegistryKey.CONFIGURED_STRUCTURE_REGISTRY).getMinecraftValue(structureType));
+        } else {
+            features = BuiltinRegistries.STRUCTURES.entrySet().stream().map(Map.Entry::getValue).collect(Collectors.toUnmodifiableSet());
+        }
+
+        List<WorldStructure> structures = new ArrayList<>(0);
+        // Based on StructureFeatureManager.getStructureWithPieceAt
+        for (StructureStart structureStart : featureManager.startsForStructure(chunkPos, features::contains, this.getHandle().getLevel())) {
+            if (featureManager.structureHasPieceAt(blockPos, structureStart)) {
+                structures.add(structureStart.bukkit(this));
+            }
+        }
+        return structures;
+    }
+
+    @Override
+    public @NotNull List<@NotNull WorldStructure> getWorldStructuresAt(@NotNull Block block) {
+        return this.getWorldStructuresAt(block, null);
+    }
+
+    // Suki end - structure API
+
     private static final Random rand = new Random();
 
     public CraftWorld(ServerLevel world, ChunkGenerator gen, BiomeProvider biomeProvider, Environment env) {
diff --git a/src/main/java/org/sucraft/suki/structure/CraftWorldStructure.java b/src/main/java/org/sucraft/suki/structure/CraftWorldStructure.java
new file mode 100644
index 0000000000000000000000000000000000000000..586396da7c178f949820b70432646b8077b34080
--- /dev/null
+++ b/src/main/java/org/sucraft/suki/structure/CraftWorldStructure.java
@@ -0,0 +1,77 @@
+// Suki - structure API
+
+package org.sucraft.suki.structure;
+
+import io.papermc.paper.world.structure.ConfiguredStructure;
+import net.minecraft.world.level.levelgen.structure.StructureStart;
+import org.bukkit.StructureType;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.List;
+import java.util.stream.StreamSupport;
+
+public class CraftWorldStructure implements WorldStructure {
+
+    private final StructureStart handle;
+    private final CraftWorld world;
+
+    public CraftWorldStructure(StructureStart handle, CraftWorld world) {
+        this.handle = handle;
+        this.world = world;
+    }
+
+    public StructureStart getHandle() {
+        return this.handle;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (!(obj instanceof WorldStructure)) {
+            return false;
+        }
+        return ((CraftWorldStructure) obj).getHandle().equals(this.getHandle());
+    }
+
+    @Override
+    public int hashCode() {
+        return this.getHandle().hashCode();
+    }
+
+    @Override
+    public @NotNull World getWorld() {
+        return this.world;
+    }
+
+    private @Nullable List<@NotNull WorldStructurePiece> cachedPieces = null;
+
+    @Override
+    public boolean isValid() {
+        return this.getHandle().isValid();
+    }
+
+    @Override
+    public @NotNull ConfiguredStructure getConfiguredStructure() {
+        final var paperRegistry = io.papermc.paper.registry.PaperRegistry.getRegistry(io.papermc.paper.registry.RegistryKey.CONFIGURED_STRUCTURE_REGISTRY);
+        final var feature = this.getHandle().getStructure();
+        return StreamSupport.stream(paperRegistry.spliterator(), false).filter(apiValue -> paperRegistry.getMinecraftValue(apiValue).equals(feature)).findAny().get();
+    }
+
+    @Override
+    public @NotNull StructureType getStructureType() {
+        return this.getConfiguredStructure().getStructureType();
+    }
+
+    @Override
+    public @NotNull List<@NotNull WorldStructurePiece> getPieces() {
+        if (this.cachedPieces == null) {
+            this.cachedPieces = this.getHandle().getPieces().stream()
+                .map(piece -> (WorldStructurePiece) piece.bukkit(this))
+                .toList();
+        }
+        return this.cachedPieces;
+    }
+
+}
diff --git a/src/main/java/org/sucraft/suki/structure/CraftWorldStructureBoundingBox.java b/src/main/java/org/sucraft/suki/structure/CraftWorldStructureBoundingBox.java
new file mode 100644
index 0000000000000000000000000000000000000000..b28dbe50ff7fda043c331da520b44369c0226eb9
--- /dev/null
+++ b/src/main/java/org/sucraft/suki/structure/CraftWorldStructureBoundingBox.java
@@ -0,0 +1,32 @@
+// Suki - structure API
+
+package org.sucraft.suki.structure;
+
+import net.minecraft.world.level.levelgen.structure.BoundingBox;
+
+public class CraftWorldStructureBoundingBox implements WorldStructureBoundingBox {
+
+    private final BoundingBox handle;
+
+    public CraftWorldStructureBoundingBox(BoundingBox handle) {
+        this.handle = handle;
+    }
+
+    public BoundingBox getHandle() {
+        return this.handle;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (!(obj instanceof WorldStructureBoundingBox)) {
+            return false;
+        }
+        return ((CraftWorldStructureBoundingBox) obj).getHandle().equals(this.getHandle());
+    }
+
+    @Override
+    public int hashCode() {
+        return this.getHandle().hashCode();
+    }
+
+}
diff --git a/src/main/java/org/sucraft/suki/structure/CraftWorldStructurePiece.java b/src/main/java/org/sucraft/suki/structure/CraftWorldStructurePiece.java
new file mode 100644
index 0000000000000000000000000000000000000000..095b83a7a7bb18392912ba00afd2d59e58a75f80
--- /dev/null
+++ b/src/main/java/org/sucraft/suki/structure/CraftWorldStructurePiece.java
@@ -0,0 +1,164 @@
+// Suki - structure API
+
+package org.sucraft.suki.structure;
+
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.world.level.levelgen.structure.StructurePiece;
+import net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Optional;
+
+public class CraftWorldStructurePiece implements WorldStructurePiece {
+
+    private final StructurePiece handle;
+    private final CraftWorldStructure parent;
+
+    public CraftWorldStructurePiece(StructurePiece handle, CraftWorldStructure parent) {
+        this.handle = handle;
+        this.parent = parent;
+    }
+
+    public StructurePiece getHandle() {
+        return this.handle;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (!(obj instanceof WorldStructurePiece)) {
+            return false;
+        }
+        return ((CraftWorldStructurePiece) obj).getHandle().equals(this.getHandle());
+    }
+
+    @Override
+    public int hashCode() {
+        return this.getHandle().hashCode();
+    }
+
+    @Override
+    public @NotNull WorldStructure getParent() {
+        return this.parent;
+    }
+
+    @Override
+    public @NotNull WorldStructurePieceType getType() {
+        return new CraftWorldStructurePieceType(this.getHandle().getType());
+    }
+
+    private @Nullable Optional<CompoundTag> cachedTag = null;
+
+    public @Nullable CompoundTag getTag() {
+        if (this.cachedTag == null) {
+            this.cachedTag = Optional.ofNullable(this.getHandle().createTag(StructurePieceSerializationContext.fromLevel(((CraftWorld) this.parent.getWorld()).getHandle())));
+        }
+        return this.cachedTag.orElse(null);
+    }
+
+    private @Nullable Optional<String> cachedFullStructureTemplateName = null;
+
+    @Override
+    public @Nullable String getFullStructureTemplateName() {
+        if (this.cachedFullStructureTemplateName == null) {
+            @Nullable CompoundTag tag = this.getTag();
+            if (tag == null) {
+                this.cachedFullStructureTemplateName = Optional.empty();
+            } else {
+                @Nullable String name = tag.getString("Template");
+                if (name != null && name.isBlank()) {
+                    this.cachedFullStructureTemplateName = Optional.empty();
+                } else {
+                    this.cachedFullStructureTemplateName = Optional.ofNullable(name);
+                }
+            }
+        }
+        return this.cachedFullStructureTemplateName.orElse(null);
+    }
+
+    private @Nullable Optional<String> cachedShortStructureTemplateName = null;
+
+    @Override
+    public @Nullable String getShortStructureTemplateName() {
+        if (this.cachedShortStructureTemplateName == null) {
+            @Nullable String fullTemplateName = this.getFullStructureTemplateName();
+            if (fullTemplateName == null) {
+                this.cachedShortStructureTemplateName = Optional.empty();
+            } else {
+                int colonIndex = fullTemplateName.indexOf(':');
+                if (colonIndex == -1) {
+                    this.cachedShortStructureTemplateName = Optional.of(fullTemplateName);
+                } else {
+                    @NotNull String name = fullTemplateName.substring(colonIndex + 1);
+                    if (name.isBlank()) {
+                        this.cachedShortStructureTemplateName = Optional.empty();
+                    } else {
+                        this.cachedShortStructureTemplateName = Optional.of(name);
+                    }
+                }
+            }
+        }
+        return this.cachedShortStructureTemplateName.orElse(null);
+    }
+
+    private @Nullable Optional<String> cachedFullPoolElementName = null;
+
+    @Override
+    public @Nullable String getFullPoolElementName() {
+        if (this.cachedFullPoolElementName == null) {
+            @Nullable CompoundTag tag = this.getTag();
+            if (tag == null) {
+                this.cachedFullPoolElementName = Optional.empty();
+            } else {
+                if (!tag.contains("pool_element")) {
+                    this.cachedFullPoolElementName = Optional.empty();
+                } else {
+                    @NotNull CompoundTag poolElementTag = tag.getCompound("pool_element");
+                    @Nullable String name = poolElementTag.getString("location");
+                    if (name != null && name.isBlank()) {
+                        this.cachedFullPoolElementName = Optional.empty();
+                    } else {
+                        this.cachedFullPoolElementName = Optional.ofNullable(name);
+                    }
+                }
+            }
+        }
+        return this.cachedFullPoolElementName.orElse(null);
+    }
+
+    private @Nullable Optional<String> cachedShortPoolElementName = null;
+
+    @Override
+    public @Nullable String getShortPoolElementName() {
+        if (this.cachedShortPoolElementName == null) {
+            @Nullable String fullPoolElementName = this.getFullPoolElementName();
+            if (fullPoolElementName == null) {
+                this.cachedShortPoolElementName = Optional.empty();
+            }
+            int colonIndex = fullPoolElementName.indexOf(':');
+            if (colonIndex == -1) {
+                this.cachedShortPoolElementName = Optional.of(fullPoolElementName);
+            } else {
+                @Nullable String name = fullPoolElementName.substring(colonIndex + 1);
+                if (name != null && name.isBlank()) {
+                    this.cachedShortPoolElementName = Optional.empty();
+                } else {
+                    this.cachedShortPoolElementName = Optional.ofNullable(name);
+                }
+            }
+        }
+        return this.cachedShortPoolElementName.orElse(null);
+    }
+
+    private @Nullable CraftWorldStructureBoundingBox cachedBoundingBox = null;
+
+    @Override
+    public @NotNull WorldStructureBoundingBox getBoundingBox() {
+        if (this.cachedBoundingBox == null) {
+            this.cachedBoundingBox = this.getHandle().getBoundingBox().bukkit();
+        }
+        return this.cachedBoundingBox;
+    }
+
+}
diff --git a/src/main/java/org/sucraft/suki/structure/CraftWorldStructurePieceType.java b/src/main/java/org/sucraft/suki/structure/CraftWorldStructurePieceType.java
new file mode 100644
index 0000000000000000000000000000000000000000..4d254f4a7388be07497786a30d8ac7f43ec0edb2
--- /dev/null
+++ b/src/main/java/org/sucraft/suki/structure/CraftWorldStructurePieceType.java
@@ -0,0 +1,32 @@
+// Suki - structure API
+
+package org.sucraft.suki.structure;
+
+import net.minecraft.world.level.levelgen.structure.pieces.StructurePieceType;
+
+public class CraftWorldStructurePieceType implements WorldStructurePieceType {
+
+    private final StructurePieceType handle;
+
+    public CraftWorldStructurePieceType(StructurePieceType handle) {
+        this.handle = handle;
+    }
+
+    public StructurePieceType getHandle() {
+        return this.handle;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (!(obj instanceof WorldStructurePieceType)) {
+            return false;
+        }
+        return ((CraftWorldStructurePieceType) obj).getHandle().equals(this.getHandle());
+    }
+
+    @Override
+    public int hashCode() {
+        return this.getHandle().hashCode();
+    }
+
+}
